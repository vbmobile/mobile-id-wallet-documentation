{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Getting started","text":""},{"location":"index.html#introduction","title":"Introduction","text":"<p>The Mobile ID Wallet SDK provides a comprehensive set of tools to manage digital identity documents and boarding passes securely within an app. It allows developers to capture and parse documents and boarding passes using the device camera, optionally leveraging RFID for added security. Parsed information can be stored in the wallet, retrieved for display, or deleted as needed. </p>"},{"location":"index.html#key-features","title":"Key Features","text":"<ul> <li>Setup &amp; Configuration: Initialize and configure the wallet with custom setup parameters.</li> <li>Document &amp; Boarding Pass Management: Parse Boarding Pass: Extract flight details from an image. Scan Boarding Pass: Capture and parse boarding passes using the device camera. Read Document: Scan identity documents via camera and RFID.</li> <li>Data Retrieval &amp; Storage: Retrieve all stored documents or boarding passes. Fetch specific items by unique identifiers. Access full details of original boarding passes.</li> <li>Deletion Operations: Delete individual documents or boarding passes. Perform batch deletion of all wallet content.</li> <li>Association &amp; Linking: Associate boarding passes with identity documents and create subject relationships.</li> <li>Status Tracking: Query the current status of a subject by ID.</li> </ul>"},{"location":"index.html#prerequisites","title":"Prerequisites","text":"<p>You must send an ID (Bundle ID or Application ID) to Amadeus so that we can associate the API key with the application, this way your API key is protected with only authorized applications.</p> AndroidiOS <p>To integrate the Mobile ID Wallet SDK for Android, the following prerequisites must be met: </p> <ul> <li>Install Android Studio</li> <li>Target API level 26 (Oreo) or later</li> </ul> <p>You must also send an ID (Bundle ID or Application ID) to Amadeus so that we can associate the API key with the application, this way your API key is protected with only authorized applications.</p> <p>To integrate the Mobile ID Wallet SDK for iOS, the following prerequisites must be met: </p> <ul> <li>Install or update Xcode to latest version;</li> <li>Target iOS 14 or later. </li> <li>Install CocoaPods</li> </ul>"},{"location":"index.html#sdk-install","title":"SDK install","text":"AndroidiOS <p>To add the Wallet SDK to your app, perform the following steps:</p> <ol> <li>Add these new repositories in your app top level gradle file: <pre><code>maven { url \"https://vbmobileidstorage.blob.core.windows.net/android/\" }\nmaven { url \"https://maven.regulaforensics.com/RegulaDocumentReader\" }\nmaven { url \"https://jitpack.io\" }\n</code></pre></li> <li>Declare Mobile ID SDK and document reader provider as a dependency in your app level gradle file: <pre><code>implementation(\"com.amadeus.wallet.sdk:mobileid-wallet-sdk:&lt;1.0.0-beta.1&gt;@aar\") { transitive = true }\n</code></pre></li> <li>Sync gradle.</li> </ol> <p>To add the SDK to your app, perform the following steps:</p> <p>CocoaPods</p> <p>To always use the latest release, add the following to your Podfile:</p> <ol> <li>Add the following to your Podfile, with the latest version: <pre><code>pod 'mobileid-wallet-sdk', '1.0.0'\n</code></pre></li> <li>Add MobileIdWalletSDK cocoapods repo as a source in your podfile: <pre><code>source 'https://cdn.cocoapods.org/'\n</code></pre></li> <li>Run in Terminal the command below to install pods in your project: <pre><code>pod install\n</code></pre></li> </ol> <p>NOTE: Due the necessity of the SDK to be built for distribution, a post installscript might be needed in your Podfile: (https://github.com/CocoaPods/CocoaPods/issues/9232). Example: <pre><code>post_install do |installer|\n    installer.pods_project.build_configurations.each do |config|\n        config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'\n        config.build_settings[\"EXCLUDED_ARCHS[sdk=iphonesimulator*]\"] = \"arm64\"\n    end\nend\n</code></pre></p> <p>finally a full pod file will look something like:</p> <pre><code>source 'https://github.com/CocoaPods/Specs.git'\n\nplatform :ios, '15.0'\nuse_modular_headers!  \n\nworkspace 'Workspace.xcworkspace'\nproject 'DemoApp.xcodeproj'\n\ntarget 'DemoApp' do\n  use_frameworks!\n  project 'DemoApp.xcodeproj'\n  pod 'MobileIdWalletSDK', '1.0.0'\nend\n\npost_install do |pi|\n    pi.pods_project.targets.each do |t|\n        t.build_configurations.each do |config|\n            config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'\n            config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'\n        end\n    end\nend\n</code></pre>"},{"location":"index.html#configurations","title":"Configurations","text":""},{"location":"index.html#mobileidwalletconfig-walletcoreconfig","title":"MobileIdWalletConfig, WalletCoreConfig","text":"<ul> <li>serverHost: serverHost from Mobile Wallet API server;</li> <li>apiKey: apiKey from Mobile API server;</li> <li>baseURL: baseURL from Mobile API server;</li> <li>databaseID: databaseID from Mobile API server;</li> </ul> AndroidiOS <pre><code>WalletSdkConfig(\n    enrolmentConfig = EnrolmentConfig(\n        documentReaderConfig = DocumentReaderConfig(\n            multipageProcessing = true,\n            databaseId = \"Full\"\n        ),\n        apiConfig = APIConfig(\n            baseUrl = URL(\"&lt;YOUR_ENROLMENT_BASE_URL&gt;\"),\n            timeout = 30,\n            logLevel = MobileAPILogLevel.NONE,\n            apiKey = \"&lt;YOUR_API_KEY&gt;\"\n        )\n    ),\n    walletConfig = WalletConfig(\n        url = URL(\"&lt;YOUR_WALLET_SERVER_HOST_BASE_URL&gt;\"),\n        logLevel = WalletLogLevel.NONE\n    )\n)\n</code></pre> <pre><code>    let mobileIdWalletConfig: MobileIdWalletConfig = .init(\n        enrolmentConfig: .init(apiConfig:\n            .init(\n                baseURL: \"&lt;YOUR_WALLET_SERVER_HOST_BASE_URL&gt;\",\n                timeout: 30,\n                apiKey: \"&lt;YOUR_API_KEY&gt;\"\n            )\n        ),\n        documentReaderConfig: .init(\n            multipageProcessing: false,\n            databaseID: \"&lt;YOUR_DATABASE_ID&gt;\"\n        ),\n        enrolmentViewRegister: .init()\n    )\n</code></pre>"},{"location":"index.html#initialize-the-sdk","title":"Initialize the SDK","text":"<p>For more customization and flexibility, this option allows developers to implement their own UI and define the logic for various features. It requires additional development effort but enables a fully tailored user experience.</p> <p>Choose the option that best fits your project\u2019s requirements!</p> AndroidiOS <p>We advise to initialize the sdk on the application level:</p> <pre><code>MobileIdWallet.initialize(\n    context = this,\n    walletConfig = WalletSdkConfig(\n        enrolmentConfig = EnrolmentConfig(\n            documentReaderConfig = DocumentReaderConfig(\n                multipageProcessing = true,\n                databaseId = \"Full\"\n            ),\n            apiConfig = APIConfig(\n                baseUrl = URL(\"&lt;YOUR_ENROLMENT_BASE_URL&gt;\"),\n                timeout = 30,\n                logLevel = MobileAPILogLevel.NONE,\n                apiKey = \"&lt;YOUR_API_KEY&gt;\"\n            )\n        ),\n        walletConfig = WalletConfig(\n            url = URL(\"&lt;YOUR_WALLET_SERVER_HOST_BASE_URL&gt;\"),\n            logLevel = WalletLogLevel.NONE\n        )\n    )\n)\n</code></pre> <pre><code>import UIKit\nimport MobileIdSDKiOS\nimport MobileIdWalletSDK\n\nextension AppDelegate {\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool {\n        window = UIWindow(frame: UIScreen.main.bounds)\n        //\n        // Prepare SDK Config\n        //\n        let mobileIdWalletConfig: MobileIdWalletConfig = .init(\n            enrolmentConfig: .init(apiConfig:\n                .init(\n                    baseURL: \"&lt;YOUR_ENROLMENT_BASE_URL&gt;\",\n                    timeout: 30,\n                    apiKey: \"&lt;YOUR_API_KEY&gt;\"\n                )\n            ),\n            documentReaderConfig: .init(\n                multipageProcessing: false,\n                databaseID: \"&lt;YOUR_DATABASE_ID&gt;\"\n            ),\n            enrolmentViewRegister: .init()\n        )\n        let mobileIdWalletSetup: MobileIdWalletSetup.Input = .init(\n            mobileIdWalletConfig: mobileIdWalletConfig\n        )\n        //\n        // Create SDK Instances &amp; Setup\n        //\n        let mobileIdWallet: MobileIdWalletProtocol = MobileIdWallet.shared\n        mobileIdWallet.setup(mobileIdWalletSetup)\n\n        //\n        // WelcomeScreenViewController is your app inititial screen\n        //\n        window?.rootViewController = UINavigationController(rootViewController: WelcomeScreenViewController(dependencies: nil))\n        window?.makeKeyAndVisible()\n\n        return true\n    }\n}\n</code></pre>"},{"location":"index.html#permissions","title":"Permissions","text":""},{"location":"index.html#rfid-chip-processing","title":"RFID Chip Processing","text":"AndroidiOS <p>In order to use the RFID feature, the user must give the NFC permission in runtime, otherwise it won't work. We already handle the permission check and added to the manifest the following: <pre><code>&lt;uses-permission android:name=\"android.permission.NFC\" /&gt;\n</code></pre> So when using the RFID feature, the user will be prompted to concede the permission if it hadn't already.</p> <p>Step 1: Add Near Field Communication Tag Reading under the Capabilities tab for the project\u2019s target (or on your .entitlements file):</p> <pre><code>&lt;key&gt;com.apple.developer.nfc.readersession.formats&lt;/key&gt;\n&lt;array&gt;\n    &lt;string&gt;TAG&lt;/string&gt;\n&lt;/array&gt;\n</code></pre> <p></p> <p>Step 2:  Add the NFCReaderUsageDescription permission to your Info.plist file as its needed to access the NFC hardware:</p> <pre><code>&lt;key&gt;NFCReaderUsageDescription&lt;/key&gt;\n&lt;string&gt;NFC tag to read NDEF messages&lt;/string&gt;\n</code></pre> <p>Step 3: Declare <code>com.apple.developer.nfc.readersession.iso7816.select-identifiers</code> a list of application identifiers that the app must be able to read according to ISO7816:</p> <pre><code>&lt;key&gt;com.apple.developer.nfc.readersession.iso7816.select-identifiers&lt;/key&gt;\n&lt;array&gt;\n    &lt;string&gt;A0000002471001&lt;/string&gt;\n    &lt;string&gt;E80704007F00070302&lt;/string&gt;\n    &lt;string&gt;A000000167455349474E&lt;/string&gt;\n    &lt;string&gt;A0000002480100&lt;/string&gt;\n    &lt;string&gt;A0000002480200&lt;/string&gt;\n    &lt;string&gt;A0000002480300&lt;/string&gt;\n    &lt;string&gt;A00000045645444C2D3031&lt;/string&gt;\n    &lt;string&gt;A0000002471001&lt;/string&gt;\n    &lt;string&gt;A0000002472001&lt;/string&gt;\n    &lt;string&gt;00000000000000&lt;/string&gt;\n    &lt;string&gt;63000000000001&lt;/string&gt;\n    &lt;string&gt;D4100000030001&lt;/string&gt;\n&lt;/array&gt;\n</code></pre> <p></p>"},{"location":"index.html#faceid","title":"FaceID","text":"<p>In order for the SDK to use the FaceID, the user must grant permission to do so.</p> AndroidiOS <p>Nothing to do.</p> <p>To configure, in the app's Info.plist file, include NSFaceIDUsageDescription. After includ it, provide a description of why the app requires Face ID authentication.</p> <p></p>"},{"location":"index.html#camera","title":"Camera","text":"<p>In order for the SDK to use the camera, the user must grant permission to do so.</p> AndroidiOS <p>In order to use the camera related features, the user must give the camera permission in runtime, otherwise it won't work. We already handle the permission check and added to the manifest the following: <pre><code>&lt;uses-permission android:name=\"android.permission.CAMERA\" /&gt;\n</code></pre> So when using any feature that needs the camera, the user will be prompted to concede the permission if it hadn't already.</p> <p>To configure, in the app's Info.plist file, include NSCameraUsageDescription. After includ it, provide a message that explains the user why your app needs to capture media.</p> <p></p>"},{"location":"index.html#dependencies","title":"Dependencies","text":"AndroidiOS <ul> <li> <p>Microsoft</p> <ul> <li>com.microsoft.entra.verifiedid:walletlibrary:1.0.0</li> </ul> </li> <li> <p>Amadeus Enrolment</p> <ul> <li>com.visionbox.mobileid.sdk:mid-sdk-enrolment:8.1.0</li> <li>com.visionbox.mobileid.sdk:vb-ocrmrzrfid-regula:1.0.3</li> </ul> </li> </ul> <ul> <li>'MobileIdSDKiOS', '~&gt; '8.1.6'</li> <li>'WalletLibrary', </li> <li>'VBOcrMrzRfidRegula-ios'     </li> </ul>"},{"location":"index.html#other-settings","title":"Other Settings","text":"AndroidiOS <p>Nothing to do.</p> <p>Disable User Script Sandboxing by pasting </p> <pre><code>ENABLE_USER_SCRIPT_SANDBOXING = NO\n</code></pre> <p>on project settings.</p> <p></p>"},{"location":"Features/MobileIdWalletSDK/BoardingPasses/Index.html","title":"Boarding Passes","text":"<p>The Mobile ID Wallet SDK provides robust functionality for managing boarding passes within the wallet. Developers can retrieve all stored boarding passes or access a specific boarding pass by its unique identifier, including full details when needed. Boarding passes can be added to the wallet by parsing images or scanning them directly with the device camera, and they can also be deleted when no longer required. </p> <p>All operations are fully asynchronous with async/await support and provide completion handler alternatives for legacy workflows. Inputs and outputs are strongly typed, ensuring safe and predictable access to boarding pass data, while the SDK maintains a consistent Swift-native API style for seamless integration into your app.</p>"},{"location":"Features/MobileIdWalletSDK/BoardingPasses/Index.html#setup","title":"Setup","text":"AndroidiOS <pre><code>TO DO\n</code></pre> <pre><code>import MobileIdWalletSDK\nimport Foundation\nimport UIKit\n\nclass BoardingPassManagerSampleUsage {\n    let mobileIdWallet: MobileIdWalletProtocol\n    init(mobileIdWallet: MobileIdWalletProtocol) {\n        self.mobileIdWallet = mobileIdWallet\n    }\n\n    init(input: MobileIdWalletSetup.Input) {\n        self.mobileIdWallet = MobileIdWallet.shared\n        mobileIdWallet.setup(.init(mobileIdWalletConfig: input.mobileIdWalletConfig))\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/BoardingPasses/Index.html#parsescan","title":"Parse/Scan","text":"AndroidiOS <pre><code>TO DO\n</code></pre> <pre><code>extension BoardingPassManagerSampleUsage {\n    /// Scans a boarding pass using the device camera, parses its information, and stores it in the wallet.\n    func scanBoardingPass() {\n        let viewController = UIViewController()\n        Task {\n            try? await mobileIdWallet.scanBoardingPass(.init(\n                viewController: viewController,\n                parameters: .init(validateBoardingPass: true)\n            ))\n        }\n    }\n\n    /// Parses a boarding pass image to extract flight information and stores it in the wallet.\n    func parseBoardingPass() {\n        let viewController = UIViewController()\n        let boardingPassImage = UIImage()\n        Task {\n            try? await mobileIdWallet.parseBoardingPass(.init(\n                viewController: viewController,\n                parameters: .init(validateBoardingPass: true, boardingPassData: nil, boardingPassImage: boardingPassImage)\n            ))\n        }\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/BoardingPasses/Index.html#getfetch","title":"Get/Fetch","text":"AndroidiOS <pre><code>TO DO\n</code></pre> <pre><code>extension BoardingPassManagerSampleUsage {\n    /// Retrieves all boarding passes currently stored in the wallet.\n    func getAllBoardingPass() async {\n        Task {\n            let result = try? await mobileIdWallet.getAllBoardingPass()\n            print(result?.records ?? [])\n        }\n    }\n\n    /// Retrieves a specific boarding pass using its unique identifier.\n    func getBoardingPassById() async {\n        let boardingPassId = \"your_boarding_pass_id\"\n        let result = try? await mobileIdWallet.getBoardingPass(.init(boardingPassId: boardingPassId))\n        guard let boardingPass = result?.record else { return }\n        print(boardingPass)\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/BoardingPasses/Index.html#delete","title":"Delete","text":"AndroidiOS <pre><code>TO DO\n</code></pre> <pre><code>extension BoardingPassManagerSampleUsage {\n    /// Deletes a specific boarding pass using its unique identifier.\n    func deleteBoardingPass() async {\n        let boardingPassId = \"your_boarding_pass_id\"\n        _ = try? await mobileIdWallet.deleteBoardingPass(.init(boardingPassId: boardingPassId))\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/Documents/Index.html","title":"Document Reader","text":"<p>The Mobile ID Wallet SDK provides comprehensive support for managing identity documents within the wallet. Developers can retrieve all stored documents or access a specific document by its unique identifier. Documents can be added to the wallet by capturing them with the device camera and optionally using RFID for enhanced security. Stored documents can also be deleted when no longer needed. </p> <p>All operations support Swift\u2019s async/await concurrency model, with optional completion handler alternatives for traditional callback-based workflows. Strongly typed input and output models ensure safe and predictable access to document data, while the API maintains a consistent Swift-native style for seamless integration into your app.</p>"},{"location":"Features/MobileIdWalletSDK/Documents/Index.html#setup","title":"Setup","text":"AndroidiOS <pre><code> TO DO    \n</code></pre> <pre><code>import Foundation\nimport WalletSDKCore\nimport MobileIdWalletSDK\nimport MobileIdSDKiOS // MobileID (VB Enrollment SDK)\n\nclass DocumentsManagerSampleUsage {\n    let mobileIdWallet: MobileIdWalletProtocol\n    init(mobileIdWallet: MobileIdWalletProtocol) {\n        self.mobileIdWallet = mobileIdWallet\n    }\n\n    init(input: MobileIdWalletSetup.Input) {\n        self.mobileIdWallet = MobileIdWallet.shared\n        mobileIdWallet.setup(.init(mobileIdWalletConfig: input.mobileIdWalletConfig))\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/Documents/Index.html#read","title":"Read","text":"AndroidiOS <pre><code>MobileIdWallet.getInstance().readDocument(\n    activity = requireActivity(),\n    params = DocumentReaderParameters(true),\n    onReadDocumentCompletion = object : OnReadDocumentCompletion {\n        override fun onReadDocumentError(documentReaderError: DocumentReaderError) {\n\n        }\n\n        override fun onReadDocumentSuccess(document: Document) {\n\n        }\n    }\n)\n</code></pre> <pre><code>extension DocumentsManagerSampleUsage {\n    /// Reads a document using the device camera and optionally RFID, parses its information, and stores it in the wallet.\n    func readDocument() {\n        let yourTopViewController: UIViewController = .init()\n        let parameters: ReadDocumentParameters = .init(readRFID: true)\n        Task {\n            let result = try? await mobileIdWallet.readDocument(.init(\n                viewController: yourTopViewController,\n                readDocumentParameters: parameters\n            ))\n            guard let document = result?.document else { return }\n            print(document)\n        }\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/Documents/Index.html#retrieve-stored-documents","title":"Retrieve stored documents","text":"AndroidiOS <pre><code>TO DO\n</code></pre> <pre><code>extension DocumentsManagerSampleUsage {\n    /// Retrieves all documents currently stored in the wallet.\n    func getAllDocuments() {\n        Task {\n            guard let result = try? await mobileIdWallet.getAllDocuments() else { return }\n            print(result.records)\n        }\n    }\n\n    /// Retrieves a specific document from the wallet using its unique identifier.\n    func getDocumentById() {\n        Task {\n            let documentId = \"your_document_id\"\n            let getDocumentOutput = try? await mobileIdWallet.getDocument(.init(documentId: documentId))\n            guard let document = getDocumentOutput?.record else {\n                return\n            }\n            print(document)\n        }\n    }\n\n    /// Retrieves a specific document from the wallet using its unique identifier.\n    func getDocumentReaderReportById() {\n        Task {\n            let documentId = \"your_document_id\"\n            let getDocumentOutput = try? await mobileIdWallet.getDocument(.init(documentId: documentId))\n            guard let document = getDocumentOutput?.record else {\n                return\n            }\n            if let documentReaderReport = document.documentReaderReport {\n                print(documentReaderReport)\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/Documents/Index.html#delete-document","title":"Delete Document","text":"AndroidiOS <pre><code>TO DO\n</code></pre> <pre><code>extension DocumentsManagerSampleUsage {\n    /// Delete document by id\n    func deleteDocument() {\n        Task {\n            let documentId = \"your_document_id\"\n            let result = try? await mobileIdWallet.deleteDocument(.init(documentId: documentId))\n            if let success = result?.success {\n                print(\"success: \\(success)\")\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/Enrolment/Index.html","title":"Enrolment","text":"<p>The Mobile ID Wallet SDK provides functionality to manage the relationships between passengers, flights, documents, and boarding passes. Developers can retrieve the current status of a subject using its unique identifier, allowing apps to track verification progress or workflow state. The SDK also supports creating and verifying subjects by associating a boarding pass with a document, linking passengers to their flights securely within the wallet. </p> <p>All operations support Swift\u2019s async/await concurrency model and offer completion handler alternatives for legacy callback-based workflows. Inputs and outputs are strongly typed, ensuring safe and predictable access to subject and association data, while the API follows a consistent Swift-native design for seamless integration into your app.</p>"},{"location":"Features/MobileIdWalletSDK/Enrolment/Index.html#setup","title":"Setup","text":"AndroidiOS <pre><code> TO DO\n</code></pre> <pre><code>import Foundation\nimport WalletSDKCore\nimport MobileIdWalletSDK\nimport MobileIdSDKiOS // MobileID (VB Enrollment SDK)\n\nclass EnrolmentManagerSampleUsage {\n    let mobileIdWallet: MobileIdWalletProtocol\n    init(mobileIdWallet: MobileIdWalletProtocol) {\n        self.mobileIdWallet = mobileIdWallet\n    }\n\n    init(input: MobileIdWalletSetup.Input) {\n        self.mobileIdWallet = MobileIdWallet.shared\n        mobileIdWallet.setup(.init(mobileIdWalletConfig: input.mobileIdWalletConfig))\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/Enrolment/Index.html#add-subject","title":"Add Subject","text":"AndroidiOS <pre><code> TO DO\n</code></pre> <pre><code>extension EnrolmentManagerSampleUsage {\n    /// Verifies and creates a subject, associates a passenger with a flight, and links a boarding pass with a document in the wallet.\n    func assocBoardingPassWithDocument() {\n        let viewController = UIViewController()\n        Task {\n            let documentId = \"your_document_id\"\n            let boardingPassId = \"your_boarding_pass_id\"\n            let result = try? await mobileIdWallet.assocBoardingPassWithDocument(.init(\n                viewController: viewController,\n                documentId: documentId,\n                boardingPassId: boardingPassId\n            ))\n            /// Returns the subject id\n            guard let subjectId = result?.subjectId else { return }\n            print(subjectId)\n        }\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/Enrolment/Index.html#get-subject-status","title":"Get Subject Status","text":"AndroidiOS <pre><code> TO DO\n</code></pre> <pre><code>extension EnrolmentManagerSampleUsage {\n    /// Given a _subject id_, will return the `MobileIdSDKiOS.SubjectStatus`\n    func getSubjectStatus() {\n        Task {\n            let subjectId = \"your_subject_id\"\n            let output = try? await mobileIdWallet.getSubjectStatus(.init(subjectId: subjectId))\n            guard let subjectStatus = output?.subjectStatus else { return }\n            print(subjectStatus.id)\n            print(subjectStatus.status)\n        }\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/Intro/Index.html","title":"Intro","text":"<p>Please notice that the method names can be updated in the final release.</p> AndroidiOS"},{"location":"Features/MobileIdWalletSDK/Intro/Index.html#coroutines-vs-callback","title":"Coroutines vs Callback","text":"<p>This SDK is built with flexibility in mind, offering both modern coroutine support and traditional callbacks for all functions. Whether you prefer the clarity of Kotlin Coroutines or need backward compatibility, you can choose the approach that best fits your project.</p> <p>Using coroutines: <pre><code>launch {\n    val result = MobileIdWallet.getInstance().getPassportCredentials()\n\n    if (result.isSuccess) {\n        val credentials = result.getOrNull()\n        // handle success here\n    } else {\n        // handle error here\n    }\n}\n</code></pre></p> <p>Using callback: <pre><code>MobileIdWallet.getInstance().getPassportCredentials {\n    if (it.isSuccess) {\n        val credentials = it.getOrNull()\n        // handle success here\n    } else {\n        // handle error here\n    }\n}\n</code></pre></p>"},{"location":"Features/MobileIdWalletSDK/Intro/Index.html#asyncawait-vs-completion-handlers","title":"Async/Await vs Completion Handlers","text":"<p>This SDK is built with flexibility in mind, offering both modern async/await support and traditional completion handlers for all functions. Whether you prefer the clarity of Swift Concurrency or need backward compatibility, you can choose the approach that best fits your project.</p>"},{"location":"Features/MobileIdWalletSDK/Intro/Index.html#asyncawait-vs-completion-handlers-sample","title":"Async/Await vs Completion Handlers sample","text":"<pre><code>import MobileIdWalletSDK\nimport WalletSDKCore\n\nclass ClosureVsAssync {\n    let mobileIdWallet: MobileIdWalletProtocol\n    init(mobileIdWallet: MobileIdWalletProtocol) {\n        self.mobileIdWallet = mobileIdWallet\n    }\n}\n\nextension ClosureVsAssync {\n    func getAllDocumentsAssync() {\n        Task {\n            do {\n                let output = try await mobileIdWallet.getAllDocuments()\n                guard let first = output.records.first else { return }\n                print(first)\n            } catch {\n                print(error)\n            }\n        }\n    }\n\n    func getAllDocumentsCompletionHandler() {\n        mobileIdWallet.getAllDocuments { result in\n            switch result {\n            case .success(let output):\n                guard let first = output.records.first else { return }\n                print(first)\n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/Misc/Index.html","title":"Misc Operations","text":"<p>The Mobile ID Wallet SDK provides additional utility functions to simplify wallet management. This includes operations such as batch deleting multiple documents or boarding passes at once, allowing developers to efficiently manage wallet contents. These miscellaneous functions complement the main workflows for document and boarding pass handling, providing flexibility and control over stored data.</p> <p>All operations support Swift\u2019s async/await concurrency model, with optional completion handler alternatives for callback-based workflows. Strongly typed inputs and outputs ensure safe, predictable access to data, and the API maintains a consistent Swift-native style for seamless integration into your app.</p>"},{"location":"Features/MobileIdWalletSDK/Misc/Index.html#setup","title":"Setup","text":"AndroidiOS <pre><code>TO DO\n</code></pre> <pre><code>import Foundation\nimport WalletSDKCore\nimport MobileIdWalletSDK\nimport MobileIdSDKiOS // MobileID (VB Enrollment SDK)\n\nclass MiscSampleUsage {\n    let mobileIdWallet: MobileIdWalletProtocol\n    init(mobileIdWallet: MobileIdWalletProtocol) {\n        self.mobileIdWallet = mobileIdWallet\n    }\n\n    init(input: MobileIdWalletSetup.Input) {\n        self.mobileIdWallet = MobileIdWallet.shared\n        mobileIdWallet.setup(.init(mobileIdWalletConfig: input.mobileIdWalletConfig))\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/Misc/Index.html#batch-delte","title":"Batch Delte","text":"AndroidiOS <pre><code>TO DO\n</code></pre> <pre><code>extension MiscSampleUsage {\n    /// Deletes all content from the wallet.\n    func batchDelete() {\n        Task {\n            await mobileIdWallet.batchDelete()\n        }\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletUISDK/Intro/Index.html","title":"Intro","text":"<p>MobileIdWalletUISDK simplifies navigation by providing a pre-built UI and routing system. Developers only need to decide where to direct users within the SDK, without manually handling view controller transitions.</p> <p>The MobileIdWalletUIRouterProtocol handles routing to key sections, such as the Verifiable Credentials and Flights screens. Below is a sample implementation:</p>"},{"location":"Features/MobileIdWalletUISDK/Intro/Index.html#sample-usage","title":"Sample Usage","text":"AndroidiOS <p>To create a trip, call the following facade method:</p> <pre><code>MobileIdWalletUI.getInstance().createTrip(requireActivity())\n</code></pre> <p>To show the credentials list screen, call the following facade method:</p> <pre><code>MobileIdWalletUI.getInstance().showDigitalIds(requireActivity())\n</code></pre> <p>To show the boarding passes list screen, call the following facade method:</p> <pre><code>MobileIdWalletUI.getInstance().showTrips(requireActivity())\n</code></pre> <pre><code>import UIKit\nimport MobileIdWalletUISDK\n\nclass RoutingExampleViewController: UIViewController {\n    let router: MobileIdWalletUIRouterProtocol?\n    public init(router: MobileIdWalletUIRouterProtocol?) {\n        self.router = router\n        super.init(nibName: nil, bundle: nil)\n    }\n\n    @available(*, unavailable)\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.backgroundColor = .white\n\n        let btnAccessWallet = UIButton(type: .system)\n        btnAccessWallet.setTitle(\"Access digital ID Wallet\", for: .normal)\n        btnAccessWallet.addTarget(self, action: #selector(btnAccessWalletTapped), for: .touchUpInside)\n\n        let btnCreateTrip = UIButton(type: .system)\n        btnCreateTrip.setTitle(\"Route to trips\", for: .normal)\n        btnCreateTrip.addTarget(self, action: #selector(btnCreateTripTapped), for: .touchUpInside)\n\n        let stackView = UIStackView(arrangedSubviews: [btnAccessWallet, btnCreateTrip])\n        stackView.axis = .vertical\n        stackView.spacing = 16\n        stackView.translatesAutoresizingMaskIntoConstraints = false\n\n        view.addSubview(stackView)\n\n        NSLayoutConstraint.activate([\n            stackView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            stackView.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n\n    @objc private func btnAccessWalletTapped() {\n        router?.navigateToVerifiableCredentials(model: .init())\n    }\n\n    @objc private func btnCreateTripTapped() {\n        router?.navigateToFlights(model: .init(shouldCreateNewOnScreenLoad: false))\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletUISDK/SharingCredentials/Index.html","title":"Sharing Credentials","text":"<p>Verifiable credentials (VCs) provide a secure, tamper-proof way to issue, share, and verify digital credentials. When sharing or presenting a credential, users can selectively disclose information based on the verifier's request. This means they can prove specific claims (e.g., age or membership) without exposing unrelated details. The process typically involves cryptographic proofs, ensuring authenticity while preventing forgery or unauthorized modifications. VCs also support privacy-preserving techniques like zero-knowledge proofs, allowing users to confirm a fact without revealing the underlying data. This makes credential sharing both secure and user-controlled across various digital interactions.</p>"},{"location":"Features/MobileIdWalletUISDK/SharingCredentials/Index.html#sharing-credentials-using-deep-linking","title":"Sharing credentials using Deep linking","text":"AndroidiOS <p>When using the MobileIdWalletUISDK you don't need to do anything regarding the deeplink handling. The solution is already embedded in the MobileIdWalletUISDK and the deeplink will be automatically picked by the SDK.</p> <pre><code>import UIKit\nimport WalletSDKCommon\nimport MobileIdWalletUISDK\nimport MobileIdWalletSDK\n\n@main\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n    var window: UIWindow? // Declare the window property\n    var deeplinkManager: DeeplinkManager?\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool {\n        _ = applicationDefault(application, didFinishLaunchingWithOptions: launchOptions)\n        /* Your initial step goes here */\n        return true\n    }\n\n    func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey: Any] = [:]) -&gt; Bool {\n        if let scheme = url.scheme, scheme == \"openid-vc\" {\n            // Init the DeeplinkManager (if needed) with the reference to you MobileIdWallet(Protocol) instance\n            if deeplinkManager == nil {\n                let yourMobileIdWalletReference: MobileIdWalletProtocol = DependenciesResolver.shared.mobileIdWallet\n                deeplinkManager = DeeplinkManager(mobileIdWallet: yourMobileIdWalletReference)\n            }\n            deeplinkManager?.handleWithUI(url: url)\n            return true\n        }\n        return false\n    }   \n}\n</code></pre> <pre><code>import MobileIdWalletSDK\nimport Foundation\n\nclass DeeplinkManager {\n    let mobileIdWallet: MobileIdWalletProtocol\n    init(mobileIdWallet: MobileIdWalletProtocol) {\n        self.mobileIdWallet = mobileIdWallet\n    }\n}\n\nextension DeeplinkManager {\n    func handleWithUI(url: URL) {\n        DispatchQueue.main.asyncAfter(deadline: .now() + 1) { [weak self] in\n            guard let self else { return }\n            // Step 1 - Validate URL\n            guard let scheme = url.scheme, scheme == \"openid-vc\" else {\n                // Invalid URL\n                return\n            }\n            // Step 2 - Pick top View controler\n            let topViewController = UIApplication.shared.connectedScenes\n                .filter { $0.activationState == .foregroundActive }\n                .map { $0 as? UIWindowScene }\n                .first??.windows.first?.rootViewController\n            guard let topViewController else {\n                print(\"Fail to get top view controller\")\n                return\n            }\n            // Step 3 - Setup the MobileIdWalletUIRouter with the topViewController\n            walletUIRouter.setup(rootViewController: topViewController)\n            // Step 4 - Ordering the router do navigator to the screen\n            // where we will choose the credential to share (if any credential is stored)\n            walletUIRouter.navigateToCredentialPicker(model: .init(records: [], url: url.absoluteString))\n        }\n    }   \n}\n</code></pre>"},{"location":"MigrationGuide/MigrationGuide_Android.html","title":"Android Migration Guide","text":""},{"location":"MigrationGuide/MigrationGuide_Android.html#from-100-to-101","title":"From 1.0.0 to 1.0.1","text":""},{"location":"MigrationGuide/MigrationGuide_Android.html#required-changes","title":"Required Changes","text":"<ul> <li>To do</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_Android.html#optional-changes","title":"Optional Changes","text":"<ul> <li>To do</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_iOS.html","title":"iOS Migration Guide","text":""},{"location":"MigrationGuide/MigrationGuide_iOS.html#from-100-to-101","title":"From 1.0.0 to 1.0.1","text":""},{"location":"MigrationGuide/MigrationGuide_iOS.html#required-changes","title":"Required Changes","text":"<ul> <li>To do</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_iOS.html#optional-changes","title":"Optional Changes","text":"<ul> <li>To do</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html","title":"Android Release Notes","text":""},{"location":"ReleaseNotes/ReleaseNotes_Android.html#100-beta1","title":"1.0.0-beta.1","text":""},{"location":"ReleaseNotes/ReleaseNotes_Android.html#whats-new","title":"What's new","text":"<ul> <li> <p>MobileIdWalletSDK:</p> <ul> <li>Feature scan document</li> <li>Feature scan boarding pass</li> <li>Feature issue credential</li> <li>Feature get credentials</li> <li>Feature delete credential</li> <li>Feature get boarding passes</li> <li>Feature get boarding pass by ID</li> <li>Feature delete boarding pass</li> <li>Feature associate boarding pass with credential</li> <li>Share credential</li> </ul> </li> <li> <p>MobileIdWalletUISDK:</p> <ul> <li>Create trip</li> <li>Show credentials list</li> <li>Show boarding Passes list</li> <li>Share credential</li> </ul> </li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#improvements","title":"Improvements","text":"<ul> <li>MobileIdWalletUISDK:<ul> <li>Create feature \"Share with airport\".</li> <li>Register credential activity</li> <li>Give the user the oportunity to choose the claims that he wants to share/associate</li> </ul> </li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html","title":"iOS Release Notes","text":""},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#100","title":"1.0.0","text":""},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#whats-new","title":"What's new","text":"<ul> <li>To do.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#improvements","title":"Improvements","text":"<ul> <li>To do.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#technical-enhancements","title":"Technical Enhancements","text":"<ul> <li>To do.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#warning","title":"Warning","text":"<ul> <li>To do.</li> </ul>"}]}