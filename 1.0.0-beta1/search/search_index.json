{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Getting started","text":""},{"location":"index.html#overall-arquicteture","title":"Overall arquicteture","text":"<p>MobileIdWalletSDK vs. MobileIdWalletUISDK</p> <p>This SDK is designed to offer both flexibility and ease of use, with two distinct modules to fit different integration needs:</p> <ul> <li> <p>MobileIdWalletSDK \u2013 The core SDK, providing all essential features for managing verifiable credentials and boarding passes. Ideal for developers who want full control over UI design and implementation.</p> </li> <li> <p>MobileIdWalletUISDK \u2013 A higher-level module that includes a prebuilt UI, making it easier to integrate and manage credentials and boarding passes with minimal effort. This is perfect for those who want a faster implementation without designing custom interfaces. Whether you need a custom experience or a ready-to-use solution, the SDK adapts to your needs while ensuring a smooth and efficient workflow.</p> </li> </ul> <p></p>"},{"location":"index.html#prerequisites","title":"Prerequisites","text":"<p>You must send an ID (Bundle ID or Application ID) to vision-box so that we can associate the API key with the application, this way your API key is protected with only authorized applications.</p> AndroidiOS <p>...</p> <p>To integrate the Mobile ID Wallet SDK for iOS, the following prerequisites must be met: </p> <ul> <li>Install or update Xcode to latest version;</li> <li>Target iOS 14 or later. </li> <li>Install CocoaPods</li> </ul>"},{"location":"index.html#sdk-install","title":"SDK install","text":"AndroidiOS <p>...</p> <p>To add the SDK to your app, perform the following steps:</p> <p>CocoaPods</p> <p>To always use the latest release, add the following to your Podfile:</p> <ol> <li>Add the following to your Podfile, with the latest version: <pre><code>pod 'mobileid-wallet-sdk', '1.0.0-beta.1'\n</code></pre></li> <li>Add MobileIdWalletSDK cocoapods repo as a source in your podfile: <pre><code>source 'https://cdn.cocoapods.org/'\n</code></pre></li> <li>Run in Terminal the command below to install pods in your project: <pre><code>pod install\n</code></pre></li> </ol> <p>NOTE: Due the necessity of the SDK to be built for distribution, a post installscript might be needed in your Podfile: (https://github.com/CocoaPods/CocoaPods/issues/9232). Example: <pre><code>post_install do |installer|\n    installer.pods_project.build_configurations.each do |config|\n        config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'\n        config.build_settings[\"EXCLUDED_ARCHS[sdk=iphonesimulator*]\"] = \"arm64\"\n    end\nend\n</code></pre></p>"},{"location":"index.html#configurations","title":"Configurations","text":""},{"location":"index.html#mobileidwalletconfig-walletcoreconfig","title":"MobileIdWalletConfig, WalletCoreConfig","text":"<ul> <li>serverHost: serverHost from Mobile Wallet API server;</li> <li>apiKey: apiKey from Mobile API server;</li> <li>baseURL: baseURL from Mobile API server;</li> <li>databaseID: databaseID from Mobile API server;</li> </ul> AndroidiOS <p>...</p> <pre><code>    let walletCoreConfig: WalletCoreConfig = .init(serverHost: ConfigValues.WalletSDKCore.serverHost)\n    let mobileIdWalletConfig: MobileIdWalletConfig = .init(\n        apiKey:ConfigValues.MobileIdSDK.apiKey,\n        baseURL:ConfigValues.MobileIdSDK.baseURL,\n        databaseID: ConfigValues.MobileIdSDK.databaseID,\n        walletCoreConfig: walletCoreConfig\n    )\n</code></pre>"},{"location":"index.html#initialize-the-sdk","title":"Initialize the SDK","text":"<p>When integrating the Mobile ID Wallet SDK, you have two options depending on your needs:</p> <p>Option 1 - MobileIdWalletUI: This option provides a pre-built UI that is ready to use out of the box. It simplifies integration and allows developers to quickly implement Mobile ID functionality without worrying about designing the user interface.</p> <p>Option 2 - MobileIdWalletSDK: For more customization and flexibility, this option allows developers to implement their own UI and define the logic for various features. It requires additional development effort but enables a fully tailored user experience.</p> <p>Choose the option that best fits your project\u2019s requirements!</p> AndroidiOS <p>...</p> <p>Option 1 - Using MobileIdWalletUI</p> <pre><code>import UIKit\nimport MobileIdWalletUISDK\nimport MobileIdWalletSDK\n\nfunc applicationMobileIdWalletUIProtocol(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool {\n    window = UIWindow(frame: UIScreen.main.bounds)\n    //\n    // Prepare SDK Config\n    //\n    let mobileIdWalletConfig: MobileIdWalletConfig = .init(\n        apiKey: ConfigValues.MobileIdSDK.apiKey,\n        baseURL: ConfigValues.MobileIdSDK.baseURL,\n        databaseID: ConfigValues.MobileIdSDK.databaseID,\n        serverHost: ConfigValues.WalletSDKCore.serverHost\n    )\n    //\n    // Create SDK Instances &amp; Setup SDK\n    //\n    let mobileIdWalletUI: MobileIdWalletUIProtocol = MobileIdWalletUI.shared\n    let mobileIdWallet: MobileIdWalletProtocol = MobileIdWallet.shared\n    mobileIdWalletUI.setup(.init(\n        mobileIdWallet: mobileIdWallet,\n        mobileIdWalletSetup: .init(\n            mobileIdWalletConfig: mobileIdWalletConfig\n        )\n    ))\n\n    //\n    // Inject MobileIdWalletUIRouterProtocol router in your initial screen\n    // More info at documentation website at Features/MobileIdWalletUISDK/Intro\n    let walletUIRouter: MobileIdWalletUIRouterProtocol = MobileIdWalletUIRouter()\n    let initialViewController = MobileIdWalletUISDKSampleViewController(router: walletUIRouter)\n    window?.rootViewController = UINavigationController(rootViewController: initialViewController)\n    window?.makeKeyAndVisible()\n    if let rootViewController = window?.rootViewController {\n        walletUIRouter.setup(rootViewController: rootViewController)\n    }\n    return true\n}\n</code></pre> <p>Option 2 - Using MobileIdWalletSDK</p> <pre><code>import MobileIdWalletUISDK\nimport MobileIdWalletSDK\n\nfunc applicationMobileIdWalletProtocol(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool {\n    window = UIWindow(frame: UIScreen.main.bounds)\n    //\n    // Prepare SDK Config\n    //\n    let mobileIdWalletConfig: MobileIdWalletConfig = .init(\n        apiKey: ConfigValues.MobileIdSDK.apiKey,\n        baseURL: ConfigValues.MobileIdSDK.baseURL,\n        databaseID: ConfigValues.MobileIdSDK.databaseID,\n        serverHost: ConfigValues.WalletSDKCore.serverHost\n    )\n    let mobileIdWalletSetup: MobileIdWalletSetup.Input = .init(\n        mobileIdWalletConfig: mobileIdWalletConfig\n    )\n    //\n    // Create SDK Instances &amp; Setup\n    //\n    let mobileIdWallet: MobileIdWalletProtocol = MobileIdWallet.shared\n    mobileIdWallet.setup(mobileIdWalletSetup)\n\n    //\n    // WelcomeScreenViewController is your app inititial screen\n    //\n    window?.rootViewController = UINavigationController(rootViewController: WelcomeScreenViewController(dependencies: nil))\n    window?.makeKeyAndVisible()\n\n    return true\n}\n</code></pre>"},{"location":"index.html#permissions","title":"Permissions","text":""},{"location":"index.html#rfid-chip-processing","title":"RFID Chip Processing","text":"AndroidiOS <p>...</p> <p>Add Near Field Communication Tag Reading under the Capabilities tab for the project\u2019s target:</p> <p></p> <p>Add the NFCReaderUsageDescription permission to your Info.plist file as its needed to access the NFC hardware:</p> <pre><code>&lt;key&gt;NFCReaderUsageDescription&lt;/key&gt;\n&lt;string&gt;NFC tag to read NDEF messages&lt;/string&gt;\n</code></pre> <p>Declare <code>com.apple.developer.nfc.readersession.iso7816.select-identifiers</code> a list of application identifiers that the app must be able to read according to ISO7816:</p> <pre><code>&lt;key&gt;com.apple.developer.nfc.readersession.iso7816.select-identifiers&lt;/key&gt;\n&lt;array&gt;\n    &lt;string&gt;A0000002471001&lt;/string&gt;\n    &lt;string&gt;E80704007F00070302&lt;/string&gt;\n    &lt;string&gt;A000000167455349474E&lt;/string&gt;\n    &lt;string&gt;A0000002480100&lt;/string&gt;\n    &lt;string&gt;A0000002480200&lt;/string&gt;\n    &lt;string&gt;A0000002480300&lt;/string&gt;\n    &lt;string&gt;A00000045645444C2D3031&lt;/string&gt;\n    &lt;string&gt;A0000002471001&lt;/string&gt;\n    &lt;string&gt;A0000002472001&lt;/string&gt;\n    &lt;string&gt;00000000000000&lt;/string&gt;\n    &lt;string&gt;63000000000001&lt;/string&gt;\n    &lt;string&gt;D4100000030001&lt;/string&gt;\n&lt;/array&gt;\n</code></pre> <p></p>"},{"location":"index.html#deep-links","title":"Deep Links","text":"<p>In order for the SDK to use the deep links, the user must grant permission to do so.</p> AndroidiOS <p>...</p> <p>To configure, in the app's Info.plist file, include __ CFBundleURLTypes__.</p> <pre><code>&lt;key&gt;CFBundleURLTypes&lt;/key&gt;\n&lt;array&gt;\n    &lt;dict&gt;\n        &lt;key&gt;CFBundleURLSchemes&lt;/key&gt;\n        &lt;array&gt;\n            &lt;string&gt;openid-vc&lt;/string&gt;\n        &lt;/array&gt;\n        &lt;key&gt;CFBundleTypeRole&lt;/key&gt;\n        &lt;string&gt;Editor&lt;/string&gt;\n    &lt;/dict&gt;\n&lt;/array&gt;\n</code></pre> <p></p>"},{"location":"index.html#faceid","title":"FaceID","text":"<p>In order for the SDK to use the FaceID, the user must grant permission to do so.</p> AndroidiOS <p>...</p> <p>To configure, in the app's Info.plist file, include NSFaceIDUsageDescription. After includ it, provide a description of why the app requires Face ID authentication.</p> <p></p>"},{"location":"index.html#camera","title":"Camera","text":"<p>In order for the SDK to use the camera, the user must grant permission to do so.</p> AndroidiOS <p>...</p> <p>To configure, in the app's Info.plist file, include NSCameraUsageDescription. After includ it, provide a message that explains the user why your app needs to capture media.</p> <p></p>"},{"location":"index.html#dependencies","title":"Dependencies","text":"AndroidiOS <p>...</p> <ul> <li>'MobileIdSDKiOS', '~&gt; '8.0.0'</li> <li>'WalletLibrary', </li> <li>'VBOcrMrzRfidRegula-ios'     </li> </ul>"},{"location":"Features/MobileIdWalletSDK/DocumentReader/Index.html","title":"Document Reader","text":"<p>This SDK supports a wide range of passports and boarding passes, enabling seamless document reading and verification. By leveraging advanced OCR and NFC technologies, it ensures accurate data extraction from various document formats worldwide.</p> <p>With built-in camera integration, the SDK provides a smooth scanning experience, requiring only a base view controller to trigger the document capture. Whether you're handling passport-based identity verification or boarding pass processing, the SDK streamlines the process with high reliability and performance.maintainable.</p>"},{"location":"Features/MobileIdWalletSDK/DocumentReader/Index.html#read-passport","title":"Read Passport","text":"AndroidiOS <pre><code>    ...\n</code></pre> <pre><code>import MobileIdWalletSDK\nimport WalletSDKCore\nimport UIKit\nimport Foundation\n\nclass DocumentReader {\n    let mobileIdWallet: MobileIdWalletProtocol\n    init(mobileIdWallet: MobileIdWalletProtocol) {\n        self.mobileIdWallet = mobileIdWallet\n    }\n}\n\nextension DocumentReader {\n    func readPassportDocument() {\n        /// The `viewController` is required because the SDK needs a base view controller\n        /// to present the camera interface for document scanning. This should be the\n        /// screen from which the SDK is invoked.\n        let viewController = UIViewController()\n        Task {\n            let ouput = try? await mobileIdWallet.readDocument(.init(viewController: viewController, type: .passport))\n            guard let passportData = ouput?.document as? Model.PassportData else { return }\n            print(passportData)\n        }\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/DocumentReader/Index.html#read-boarding-pass","title":"Read Boarding Pass","text":"AndroidiOS <pre><code>    ...\n</code></pre> <pre><code>import MobileIdWalletSDK\nimport WalletSDKCore\nimport UIKit\nimport Foundation\n\nclass DocumentReader {\n    let mobileIdWallet: MobileIdWalletProtocol\n    init(mobileIdWallet: MobileIdWalletProtocol) {\n        self.mobileIdWallet = mobileIdWallet\n    }\n}\n\nextension DocumentReader {\n    func readBoardingPass() {\n        /// The `viewController` is required because the SDK needs a base view controller\n        /// to present the camera interface for document scanning. This should be the\n        /// screen from which the SDK is invoked.\n        let viewController = UIViewController()\n        Task {\n            let ouput = try? await mobileIdWallet.readDocument(.init(viewController: viewController, type: .boardingPass))\n            guard let boardingPass = ouput?.document as? Model.BoardingPass else { return }\n            print(boardingPass)\n        }\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/Intro/Index.html","title":"Intro","text":""},{"location":"Features/MobileIdWalletSDK/Intro/Index.html#asyncawait-vs-completion-handlers","title":"Async/Await vs Completion Handlers","text":"<p>This SDK is built with flexibility in mind, offering both modern async/await support and traditional completion handlers for all functions. Whether you prefer the clarity of Swift Concurrency or need backward compatibility, you can choose the approach that best fits your project.</p> <p>Why Both?</p> <ul> <li>Async/Await provides a cleaner, more readable way to handle asynchronous tasks, reducing nested closures and improving maintainability.</li> <li>Completion Handlers ensure compatibility with older iOS versions and existing callback-based architectures.</li> </ul>"},{"location":"Features/MobileIdWalletSDK/Intro/Index.html#asyncawait-vs-completion-handlers-sample","title":"Async/Await vs Completion Handlers sample","text":"AndroidiOS <pre><code>    ...\n</code></pre> <pre><code>import MobileIdWalletSDK\nimport WalletSDKCore\n\nclass ClosureVsAssync {\n    let mobileIdWallet: MobileIdWalletProtocol\n    init(mobileIdWallet: MobileIdWalletProtocol) {\n        self.mobileIdWallet = mobileIdWallet\n    }\n\n    func fetchAllCredentialsAssync() {\n        Task {\n            do {\n                let output = try await mobileIdWallet.fetchAllCredentials(.init())\n                guard let verifiedIdEntity = output.records.first else { return }\n                print(verifiedIdEntity)\n            } catch {\n                print(error)\n            }\n        }\n    }\n\n    func fetchAllCredentialsCompletionHandler() {\n        mobileIdWallet.fetchAllCredentials(.init()) { result in\n            switch result {\n            case .success(let output):\n                guard let verifiedIdEntity = output.records.first else { return }\n                print(verifiedIdEntity)\n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/ManageBoardingPasses/Index.html","title":"Boarding Passes","text":"<p>This SDK provides full CRUD support for boarding passes, allowing you to create, read, update, and delete them with ease. By integrating boarding pass data with verifiable credentials, the SDK enhances the airport experience, enabling smoother check-ins, security screenings, and boarding processes.</p> <p>With built-in scanning capabilities, the SDK extracts key information from a wide range of boarding passes, ensuring seamless integration with digital identity solutions. By linking a boarding pass to a verifiable credential, travelers can experience faster verification and reduced friction throughout their journey.</p>"},{"location":"Features/MobileIdWalletSDK/ManageBoardingPasses/Index.html#fetch-all-boarding-pass","title":"Fetch all Boarding Pass","text":"AndroidiOS <pre><code>    ...\n</code></pre> <pre><code>import MobileIdWalletSDK\nimport Foundation\nimport UIKit\n\nclass ManageBoardingPasses {\n    let mobileIdWallet: MobileIdWalletProtocol\n    init(mobileIdWallet: MobileIdWalletProtocol) {\n        self.mobileIdWallet = mobileIdWallet\n    }\n}\n\nextension ManageBoardingPasses {\n    func fetchAllBoardingPass() async {\n        Task {\n            let output = try? await mobileIdWallet.fetchAllBoardingPass(.init())\n            print(output?.records ?? [])\n        }\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/ManageBoardingPasses/Index.html#fetch-boarding-pass","title":"Fetch Boarding Pass","text":"AndroidiOS <pre><code>    ...\n</code></pre> <pre><code>import MobileIdWalletSDK\nimport Foundation\n\nclass ManageBoardingPasses {\n    let mobileIdWallet: MobileIdWalletProtocol\n    init(mobileIdWallet: MobileIdWalletProtocol) {\n        self.mobileIdWallet = mobileIdWallet\n    }\n}\n\nextension ManageBoardingPasses {\n    func fetchBoardingPass() async {\n        guard let fetchAllBoardingPassOutput = try? await mobileIdWallet.fetchAllBoardingPass(.init()),\n              let boardingPassId = fetchAllBoardingPassOutput.records.first?.id else { return }\n        let output = try? await mobileIdWallet.fetchBoardingPass(.init(boardingPassId: boardingPassId))\n        guard let boardingPass = output?.record else { return }\n        print(boardingPass)\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/ManageBoardingPasses/Index.html#read-boarding-pass","title":"Read Boarding Pass","text":"AndroidiOS <pre><code>    ...\n</code></pre> <pre><code>import MobileIdWalletSDK\nimport Foundation\n\nclass ManageBoardingPasses {\n    let mobileIdWallet: MobileIdWalletProtocol\n    init(mobileIdWallet: MobileIdWalletProtocol) {\n        self.mobileIdWallet = mobileIdWallet\n    }\n}\n\nextension ManageBoardingPasses {\n    func readDocumentBoardingPass() {\n        /// The `viewController` is required because the SDK needs a base view controller\n        /// to present the camera interface for document scanning. This should be the\n        /// screen from which the SDK is invoked.\n        let viewController = UIViewController()\n        Task {\n            try? await mobileIdWallet.readDocument(.init(viewController: viewController, type: .boardingPass))\n        }\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/ManageBoardingPasses/Index.html#associate-boarding-pass-with-verifiable-credential","title":"Associate Boarding Pass with Verifiable Credential","text":"AndroidiOS <pre><code>    ...\n</code></pre> <pre><code>import MobileIdWalletSDK\nimport Foundation\n\nclass ManageBoardingPasses {\n    let mobileIdWallet: MobileIdWalletProtocol\n    init(mobileIdWallet: MobileIdWalletProtocol) {\n        self.mobileIdWallet = mobileIdWallet\n    }\n}\n\nextension ManageBoardingPasses {\n    func assocBoardingPassWithCredential() {\n        /// The `viewController` is required because the SDK needs a base view controller\n        /// to present the camera interface for face scanning. This should be the\n        /// screen from which the SDK is invoked.\n        let viewController = UIViewController()\n        Task {\n            guard let output = try? await mobileIdWallet.fetchAllBoardingPass(.init()),\n                  let boardingPassId = output.records.first?.id else { return }\n\n            guard let output = try? await mobileIdWallet.fetchAllCredentials(.init()),\n                  let credentialId = output.records.first?.id else { return }\n\n            _ = try? await mobileIdWallet.assocBoardingPassWithCredential(.init(\n                viewController: viewController,\n                credentialId: credentialId,\n                boardingPassId: boardingPassId,\n                requiresAuthenticationToCompleteFlow: true\n            ))\n        }\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/ManageVerifiableCredentials/Index.html","title":"Verifiable Credential","text":"<p>This SDK provides a simple and flexible way to manage Verifiable Credentials, supporting full CRUD (Create, Read, Update, Delete) functionality. Whether you're issuing new credentials, retrieving stored ones, updating their contents, or securely deleting them, the SDK ensures a seamless integration experience.</p> <p>Every function is available in both async/await and completion handler variants, allowing you to choose the approach that best suits your app's architecture. With a focus on performance and security, these operations help you manage credentials efficiently while keeping your implementation clean and maintainable.</p>"},{"location":"Features/MobileIdWalletSDK/ManageVerifiableCredentials/Index.html#fetch-verifiable-credentials","title":"Fetch Verifiable Credentials","text":"AndroidiOS <pre><code>    ...\n</code></pre> <pre><code>class ManageCredentials {\n    let mobileIdWallet: MobileIdWalletProtocol\n    init(mobileIdWallet: MobileIdWalletProtocol) {\n        self.mobileIdWallet = mobileIdWallet\n    }\n}\n\nextension ManageCredentials {\n    func fetchAllCredentials() async {\n        guard let output = try? await mobileIdWallet.fetchAllCredentials(.init()),\n        let credentialClaims = output.records.first?.claims else {\n            return\n        }\n        print(credentialClaims)\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/ManageVerifiableCredentials/Index.html#delete-verifiable-credential","title":"Delete Verifiable Credential","text":"<p>Initiate  Feature intro </p> AndroidiOS <pre><code>    ...\n</code></pre> <pre><code>import MobileIdWalletSDK\n\nclass ManageCredentials {\n    let mobileIdWallet: MobileIdWalletProtocol\n    init(mobileIdWallet: MobileIdWalletProtocol) {\n        self.mobileIdWallet = mobileIdWallet\n    }\n}\n\nextension ManageCredentials {\n    func deleteCredential() async {\n        guard let output = try? await mobileIdWallet.fetchAllCredentials(.init()),\n        let credentialId = output.records.first?.id else {\n            return\n        }\n        _ = try? await mobileIdWallet.deleteCredential(.init(credentialId: credentialId))\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/ManageVerifiableCredentials/Index.html#issue-verifiable-credential-option-1","title":"Issue Verifiable Credential (Option 1)","text":"<p>Initiate  Feature intro </p> AndroidiOS <pre><code>    ...\n</code></pre> <pre><code>import MobileIdWalletSDK\nimport Foundation\nimport WalletSDKCore\n\nclass ManageCredentials {\n    let mobileIdWallet: MobileIdWalletProtocol\n    init(mobileIdWallet: MobileIdWalletProtocol) {\n        self.mobileIdWallet = mobileIdWallet\n    }\n}\n\nextension ManageCredentials {\n    func issueCredential() async {\n        let documentData = Model.PassportData(\n            id: UUID().uuidString,\n            docIcaoCode: \"AUS\",\n            docType: \"passport\",\n            isElectronic: true,\n            mrz: \"P&lt;AUSCITIZEN&lt;&lt;JANE&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;D0996596&lt;7AUS7906075F1812257&lt;20014361L&lt;&lt;&lt;&lt;06\",\n            name: \"JANE\",\n            surname: \"CITIZEN\",\n            docNumber: \"D0996596\",\n            issueState: \"AUS\",\n            expiryDate: \"35-01-01\",\n            issueDate: \"25-01-01\",\n            gender: \"F\",\n            optionalData: \"20014361L\",\n            docImage: \"/9j/4AAQSkZJRgABAQAASABIAAD/4QCMRXhpZgAATU0AKgAAAAgABQESAAMAAAABA...\", // Base64 Image\n            holderImage: \"/9j/4AAQSkZJRgABAQAASABIAAD/4QCMRXhpZgAATU0AKgAAAAgABQESAAMAAA...\", // Base64 Image\n            biometricImage: \"/9j/4AAQSkZJRgABAQAASABIAAD/4QCMRXhpZgAATU0AKgAAAAgABQECCCC...\", // Base64 Image\n            biometricFormat: \"N/A\",\n            biometricSource: \"scan\",\n            docAuthStatus: \"false\"\n        )\n        let output = try? await mobileIdWallet.issueCredential(.init(\n            documentData: documentData,\n            type: .passport,\n            requiresAuthenticationToCompleteFlow: true\n        ))\n        guard let newCredential = output?.records.last else { return }\n        print(newCredential.claims)\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/ManageVerifiableCredentials/Index.html#issue-verifiable-credential-option-2","title":"Issue Verifiable Credential (Option 2)","text":"AndroidiOS <pre><code>    ...\n</code></pre> <pre><code>import MobileIdWalletSDK\nimport Foundation\nimport WalletSDKCore\n\nclass ManageCredentials {\n    let mobileIdWallet: MobileIdWalletProtocol\n    init(mobileIdWallet: MobileIdWalletProtocol) {\n        self.mobileIdWallet = mobileIdWallet\n    }\n}\n\nextension ManageCredentials {\n    func readDocumentAndIssueCredential() async {\n        /// The `viewController` is required because the SDK needs a base view controller\n        /// to present the camera interface for document scanning. This should be the\n        /// screen from which the SDK is invoked.\n        let viewController = UIViewController()\n        try? await mobileIdWallet.readDocumentAndIssueCredential(.init(viewController: viewController, type: .passport))\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/SharingCredentials/Index.html","title":"Sharing Credentials","text":"<p>Verifiable credentials (VCs) provide a secure, tamper-proof way to issue, share, and verify digital credentials. When sharing or presenting a credential, users can selectively disclose information based on the verifier's request. This means they can prove specific claims (e.g., age or membership) without exposing unrelated details. The process typically involves cryptographic proofs, ensuring authenticity while preventing forgery or unauthorized modifications. VCs also support privacy-preserving techniques like zero-knowledge proofs, allowing users to confirm a fact without revealing the underlying data. This makes credential sharing both secure and user-controlled across various digital interactions.</p>"},{"location":"Features/MobileIdWalletSDK/SharingCredentials/Index.html#sharing-credentials-using-deep-linking","title":"Sharing credentials using Deep linking","text":"AndroidiOS <pre><code>    ...\n</code></pre> <pre><code>import MobileIdWalletSDK\nimport Foundation\n\nclass DeeplinkManager {\n    let mobileIdWallet: MobileIdWalletProtocol\n    init(mobileIdWallet: MobileIdWalletProtocol) {\n        self.mobileIdWallet = mobileIdWallet\n    }\n}\n\nextension DeeplinkManager {\n    /// Given a presentation request, will pick a random Verified Credential stored and share/present it\n    func handleWithoutUI(url: URL) {\n        Task {\n            // Step 1 - Validate URL\n            guard let scheme = url.scheme, scheme == \"openid-vc\" else {\n                // Invalid URL\n                return\n            }\n            do {\n                // Step 2 - Choose Credential to share\n                let fetchAllCredentialsOutput = try await mobileIdWallet.fetchAllCredentials(.init())\n                guard let credentialToShared = fetchAllCredentialsOutput.records.randomElement() else {\n                    // No credentias to share\n                    return\n                }\n                // Step 3 - Share Credential\n                let output = try await mobileIdWallet.shareCredential(.init(\n                    url: url.absoluteString,\n                    credentialId: credentialToShared.id,\n                    requiresAuthenticationToCompleteFlow: true\n                ))\n                // On return we will get all the activities associated to that credential\n                // Activities are events of 2 type: issuance (when credential is created)\n                // and present (when credential is presented)\n                print(output.activityForDocument.last ?? \"\")\n            } catch {\n                print(error)\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletUISDK/Intro/Index.html","title":"Intro","text":"<p>MobileIdWalletUISDK simplifies navigation by providing a pre-built UI and routing system. Developers only need to decide where to direct users within the SDK, without manually handling view controller transitions.</p> <p>The MobileIdWalletUIRouterProtocol handles routing to key sections, such as the Verifiable Credentials and Flights screens. Below is a sample implementation:</p>"},{"location":"Features/MobileIdWalletUISDK/Intro/Index.html#sample-usage","title":"Sample Usage","text":"AndroidiOS <pre><code>    ...\n</code></pre> <pre><code>import UIKit\nimport MobileIdWalletUISDK\n\nclass RoutingExampleViewController: UIViewController {\n    let router: MobileIdWalletUIRouterProtocol?\n    public init(router: MobileIdWalletUIRouterProtocol?) {\n        self.router = router\n        super.init(nibName: nil, bundle: nil)\n    }\n\n    @available(*, unavailable)\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.backgroundColor = .white\n\n        let btnAccessWallet = UIButton(type: .system)\n        btnAccessWallet.setTitle(\"Access digital ID Wallet\", for: .normal)\n        btnAccessWallet.addTarget(self, action: #selector(btnAccessWalletTapped), for: .touchUpInside)\n\n        let btnCreateTrip = UIButton(type: .system)\n        btnCreateTrip.setTitle(\"Route to trips\", for: .normal)\n        btnCreateTrip.addTarget(self, action: #selector(btnCreateTripTapped), for: .touchUpInside)\n\n        let stackView = UIStackView(arrangedSubviews: [btnAccessWallet, btnCreateTrip])\n        stackView.axis = .vertical\n        stackView.spacing = 16\n        stackView.translatesAutoresizingMaskIntoConstraints = false\n\n        view.addSubview(stackView)\n\n        NSLayoutConstraint.activate([\n            stackView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            stackView.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n\n    @objc private func btnAccessWalletTapped() {\n        router?.navigateToVerifiableCredentials(model: .init())\n    }\n\n    @objc private func btnCreateTripTapped() {\n        router?.navigateToFlights(model: .init(shouldCreateNewOnScreenLoad: false))\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletUISDK/SharingCredentials/Index.html","title":"Sharing Credentials","text":"<p>Verifiable credentials (VCs) provide a secure, tamper-proof way to issue, share, and verify digital credentials. When sharing or presenting a credential, users can selectively disclose information based on the verifier's request. This means they can prove specific claims (e.g., age or membership) without exposing unrelated details. The process typically involves cryptographic proofs, ensuring authenticity while preventing forgery or unauthorized modifications. VCs also support privacy-preserving techniques like zero-knowledge proofs, allowing users to confirm a fact without revealing the underlying data. This makes credential sharing both secure and user-controlled across various digital interactions.</p>"},{"location":"Features/MobileIdWalletUISDK/SharingCredentials/Index.html#sharing-credentials-using-deep-linking","title":"Sharing credentials using Deep linking","text":"AndroidiOS <pre><code>    ...\n</code></pre> <pre><code>import UIKit\nimport WalletSDKCommon\nimport MobileIdWalletUISDK\nimport MobileIdWalletSDK\n\n@main\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n    var window: UIWindow? // Declare the window property\n    var deeplinkManager: DeeplinkManager?\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool {\n        _ = applicationDefault(application, didFinishLaunchingWithOptions: launchOptions)\n        /* Your initial step goes here */\n        return true\n    }\n\n    func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey: Any] = [:]) -&gt; Bool {\n        if let scheme = url.scheme, scheme == \"openid-vc\" {\n            // Init the DeeplinkManager (if needed) with the reference to you MobileIdWallet(Protocol) instance\n            if deeplinkManager == nil {\n                let yourMobileIdWalletReference: MobileIdWalletProtocol = DependenciesResolver.shared.mobileIdWallet\n                deeplinkManager = DeeplinkManager(mobileIdWallet: yourMobileIdWalletReference)\n            }\n            deeplinkManager?.handleWithUI(url: url)\n            return true\n        }\n        return false\n    }   \n}\n</code></pre> <pre><code>import MobileIdWalletSDK\nimport Foundation\n\nclass DeeplinkManager {\n    let mobileIdWallet: MobileIdWalletProtocol\n    init(mobileIdWallet: MobileIdWalletProtocol) {\n        self.mobileIdWallet = mobileIdWallet\n    }\n}\n\nextension DeeplinkManager {\n    func handleWithUI(url: URL) {\n        DispatchQueue.main.asyncAfter(deadline: .now() + 1) { [weak self] in\n            guard let self else { return }\n            // Step 1 - Validate URL\n            guard let scheme = url.scheme, scheme == \"openid-vc\" else {\n                // Invalid URL\n                return\n            }\n            // Step 2 - Pick top View controler\n            let topViewController = UIApplication.shared.connectedScenes\n                .filter { $0.activationState == .foregroundActive }\n                .map { $0 as? UIWindowScene }\n                .first??.windows.first?.rootViewController\n            guard let topViewController else {\n                print(\"Fail to get top view controller\")\n                return\n            }\n            // Step 3 - Setup the MobileIdWalletUIRouter with the topViewController\n            walletUIRouter.setup(rootViewController: topViewController)\n            // Step 4 - Ordering the router do navigator to the screen\n            // where we will choose the credential to share (if any credential is stored)\n            walletUIRouter.navigateToCredentialPicker(model: .init(records: [], url: url.absoluteString))\n        }\n    }   \n}\n</code></pre>"},{"location":"MigrationGuide/MigrationGuide_Android.html","title":"Android Migration Guide","text":""},{"location":"MigrationGuide/MigrationGuide_Android.html#from-100-to-101","title":"From 1.0.0 to 1.0.1","text":""},{"location":"MigrationGuide/MigrationGuide_Android.html#required-changes","title":"Required Changes","text":"<ul> <li>To do</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_Android.html#optional-changes","title":"Optional Changes","text":"<ul> <li>To do</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_iOS.html","title":"iOS Migration Guide","text":""},{"location":"MigrationGuide/MigrationGuide_iOS.html#from-100-to-101","title":"From 1.0.0 to 1.0.1","text":""},{"location":"MigrationGuide/MigrationGuide_iOS.html#required-changes","title":"Required Changes","text":"<ul> <li>To do</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_iOS.html#optional-changes","title":"Optional Changes","text":"<ul> <li>To do</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html","title":"Android Release Notes","text":""},{"location":"ReleaseNotes/ReleaseNotes_Android.html#100","title":"1.0.0","text":""},{"location":"ReleaseNotes/ReleaseNotes_Android.html#whats-new","title":"What's new","text":"<ul> <li>To do.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#improvements","title":"Improvements","text":"<ul> <li>To do.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#technical-enhancements","title":"Technical Enhancements","text":"<ul> <li>To do.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#warning","title":"Warning","text":"<ul> <li>To do.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html","title":"iOS Release Notes","text":""},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#100","title":"1.0.0","text":""},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#whats-new","title":"What's new","text":"<ul> <li>To do.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#improvements","title":"Improvements","text":"<ul> <li>To do.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#technical-enhancements","title":"Technical Enhancements","text":"<ul> <li>To do.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#warning","title":"Warning","text":"<ul> <li>To do.</li> </ul>"}]}