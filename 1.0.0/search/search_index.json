{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Getting started","text":""},{"location":"index.html#introduction","title":"Introduction","text":"<p>The Mobile ID Wallet SDK provides a comprehensive set of tools to manage digital identity documents and boarding passes securely within an app. It allows developers to capture and parse documents and boarding passes using the device camera, optionally leveraging RFID for added security. Parsed information will be stored in the wallet, retrieved for display, or deleted as needed. </p>"},{"location":"index.html#key-features","title":"Key Features","text":"<ul> <li>Setup &amp; Configuration: Initialize and configure the wallet with custom setup parameters.</li> <li>Document &amp; Boarding Pass Management: Parse Boarding Pass: Extract flight details from an image. Scan Boarding Pass: Capture and parse boarding passes using the device camera. Read Document: Scan identity documents via camera and RFID.</li> <li>Data Retrieval &amp; Storage: Retrieve all stored documents or boarding passes. Fetch specific items by unique identifiers. Access full details of original boarding passes.</li> <li>Deletion Operations: Delete individual documents or boarding passes. Perform batch deletion of all wallet content.</li> <li>Association &amp; Linking: Associate boarding passes with identity documents and create subject relationships.</li> <li>Status Tracking: Query the current status of a subject by ID.</li> </ul>"},{"location":"index.html#prerequisites","title":"Prerequisites","text":"<p>You must send an ID (Bundle ID or Application ID) to Amadeus so that we can associate the API key with the application, this way your API key is protected with only authorized applications.</p> AndroidiOS <p>To integrate the Mobile ID Wallet SDK for Android, the following prerequisites must be met: </p> <ul> <li>Install Android Studio</li> <li>Target API level 26 (Oreo) or later</li> </ul> <p>You must also send an ID (Bundle ID or Application ID) to Amadeus so that we can associate the API key with the application, this way your API key is protected with only authorized applications.</p> <p>To integrate the Mobile ID Wallet SDK for iOS, the following prerequisites must be met: </p> <ul> <li>Install or update Xcode to latest version;</li> <li>Target iOS 14 or later. </li> <li>Install CocoaPods</li> </ul>"},{"location":"index.html#sdk-install","title":"SDK install","text":"AndroidiOS <p>To add the Wallet SDK to your app, perform the following steps:</p> <ol> <li>Add these new repositories in your app top level gradle file: <pre><code>maven { url \"https://vbmobileidstorage.blob.core.windows.net/android/\" }\nmaven { url \"https://maven.regulaforensics.com/RegulaDocumentReader\" }\nmaven { url \"https://jitpack.io\" }\n</code></pre></li> <li>Declare Mobile ID SDK and document reader provider as a dependency in your app level gradle file: <pre><code>implementation(\"com.amadeus.wallet.sdk:mobileid-wallet-sdk:1.0.0@aar\") { transitive = true }\n</code></pre></li> <li>Sync gradle.</li> </ol> <p>To add the SDK to your app, perform the following steps:</p> <p>CocoaPods</p> <p>To always use the latest release, add the following to your Podfile:</p> <ol> <li>Add the following to your Podfile, with the latest version: <pre><code>pod 'mobileid-wallet-sdk', '1.0.0'\n</code></pre></li> <li>Add cocoapods repo as a source in your podfile: <pre><code>source 'https://cdn.cocoapods.org/'\n</code></pre></li> <li>Run in Terminal the command below to install pods in your project: <pre><code>pod install\n</code></pre></li> </ol> <p>NOTE: Due the necessity of the SDK to be built for distribution, a post installscript might be needed in your Podfile: (https://github.com/CocoaPods/CocoaPods/issues/9232). Example: <pre><code> post_install do |pi|\n     pi.pods_project.targets.each do |t|\n         t.build_configurations.each do |config|\n             config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'\n             config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'\n         end\n     end\n end\n</code></pre></p> <p>finally a full pod file will look something like:</p> <pre><code>source 'https://cdn.cocoapods.org/'\n\nplatform :ios, '15.0'\nuse_modular_headers!  \n\nworkspace 'Workspace.xcworkspace'\nproject 'DemoApp.xcodeproj'\n\ntarget 'DemoApp' do\n  use_frameworks!\n  project 'DemoApp.xcodeproj'\n  pod 'mobileid-wallet-sdk', '1.0.0'\nend\n\npost_install do |pi|\n    pi.pods_project.targets.each do |t|\n        t.build_configurations.each do |config|\n            config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'\n            config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'\n        end\n    end\nend\n</code></pre>"},{"location":"index.html#configurations","title":"Configurations","text":""},{"location":"index.html#mobileidwalletconfig-walletcoreconfig","title":"MobileIdWalletConfig, WalletCoreConfig","text":"<ul> <li>apiKey: apiKey from Mobile API server;</li> <li>baseURL: baseURL from Mobile API server;</li> <li>databaseID: databaseID from Mobile API server;</li> </ul> AndroidiOS <pre><code>WalletSdkConfig(\n    enrolmentConfig = EnrolmentConfig(\n        documentReaderConfig = DocumentReaderConfig(\n            multipageProcessing = true,\n            databaseId = \"&lt;YOUR_DATABASE_ID&gt;\"\n        ),\n        apiConfig = APIConfig(\n            baseUrl = URL(\"&lt;YOUR_ENROLMENT_BASE_URL&gt;\"),\n            timeout = 30,\n            logLevel = MobileAPILogLevel.NONE,\n            apiKey = \"&lt;YOUR_API_KEY&gt;\"\n        )\n    ),\n    enrolmentCustomViews = EnrolmentCustomViews(\n        ...\n    )\n    walletConfig = WalletConfig(\n        logLevel = WalletLogLevel.NONE\n    )\n)\n</code></pre> <pre><code>    let mobileIdWalletConfig: MobileIdWalletConfig = .init(\n        enrolmentConfig: .init(apiConfig:\n            .init(\n                baseURL: \"&lt;YOUR_ENROLMENT_BASE_URL&gt;\",\n                timeout: 30,\n                apiKey: \"&lt;YOUR_API_KEY&gt;\"\n            )\n        ),\n        documentReaderConfig: .init(\n            multipageProcessing: false,\n            databaseID: \"&lt;YOUR_DATABASE_ID&gt;\"\n        ),\n        enrolmentViewRegister: .init()\n    )\n</code></pre>"},{"location":"index.html#initialize-the-sdk","title":"Initialize the SDK","text":"<p>For more customization and flexibility, this option allows developers to implement their own UI and define the logic for various features. It requires additional development effort but enables a fully tailored user experience.</p> <p>Choose the option that best fits your project\u2019s requirements!</p> AndroidiOS <p>We advise to initialize the sdk on the application level:</p> <pre><code>val walletSdkConfig = WalletSdkConfig(\n    ...\n) \nMobileIdWallet.initialize(\n    context = this,\n    walletConfig = walletSdkConfig,\n    onEnrolmentInitialized = { success, error -&gt;\n        if (!success) {\n            print(error)\n        }\n    }\n)\n</code></pre> <pre><code>import UIKit\nimport MobileIdSDKiOS\nimport MobileIdWalletSDK\n\nextension AppDelegate {\n    func application(_ application: UIApplication, \n                     didFinishLaunchingWithOptions \n                     launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool {\n     /*\n      * Your app delegate code...\n      */\n\n    // Prepare the SDK config `MobileIdWalletConfig`\n    let mobileIdWalletConfig: MobileIdWalletConfig = .init(\n        enrolmentConfig: .init(apiConfig:\n            .init(\n                baseURL: \"&lt;YOUR_ENROLMENT_BASE_URL&gt;\",\n                timeout: 30,\n                apiKey: \"&lt;YOUR_API_KEY&gt;\"\n            )\n        ),\n        documentReaderConfig: .init(\n            multipageProcessing: false,\n            databaseID: \"&lt;YOUR_DATABASE_ID&gt;\"\n        ),\n        enrolmentViewRegister: .init()\n    )\n    // Create SDK Instance &amp; setup instance with config\n    let mobileIdWallet: MobileIdWalletProtocol = MobileIdWallet.shared\n    mobileIdWallet.initialize(mobileIdWalletConfig, completion: { [weak self] result in\n        switch result {\n        case .success:\n            // Inject your SDK instance into your app\n            let rootViewController: UIViewController = WelcomeScreenViewController(dependencies: .init(mobileIdWallet: mobileIdWallet))\n            self?.window?.rootViewController = UINavigationController(rootViewController: rootViewController)\n            self?.window?.makeKeyAndVisible()\n        case .failure(let error):\n            print(\"SDK Initialization Error: \\(error)\")\n        }\n    })\n\n     /*\n      * Your app delegate code...\n      */\n\n    return true\n    }\n}\n</code></pre>"},{"location":"index.html#permissions","title":"Permissions","text":""},{"location":"index.html#rfid-chip-processing","title":"RFID Chip Processing","text":"AndroidiOS <p>In order to use the RFID feature, the user must give the NFC permission in runtime, otherwise it won't work. We already handle the permission check and added to the manifest the following: <pre><code>&lt;uses-permission android:name=\"android.permission.NFC\" /&gt;\n</code></pre> So when using the RFID feature, the user will be prompted to concede the permission if it hadn't already.</p> <p>Step 1: Add Near Field Communication Tag Reading under the Capabilities tab for the project\u2019s target (or on your .entitlements file):</p> <pre><code>&lt;key&gt;com.apple.developer.nfc.readersession.formats&lt;/key&gt;\n&lt;array&gt;\n    &lt;string&gt;TAG&lt;/string&gt;\n&lt;/array&gt;\n</code></pre> <p></p> <p>Step 2:  Add the NFCReaderUsageDescription permission to your Info.plist file as its needed to access the NFC hardware:</p> <pre><code>&lt;key&gt;NFCReaderUsageDescription&lt;/key&gt;\n&lt;string&gt;NFC tag to read NDEF messages&lt;/string&gt;\n</code></pre> <p>Step 3: Declare <code>com.apple.developer.nfc.readersession.iso7816.select-identifiers</code> a list of application identifiers that the app must be able to read according to ISO7816:</p> <pre><code>&lt;key&gt;com.apple.developer.nfc.readersession.iso7816.select-identifiers&lt;/key&gt;\n&lt;array&gt;\n    &lt;string&gt;A0000002471001&lt;/string&gt;\n    &lt;string&gt;E80704007F00070302&lt;/string&gt;\n    &lt;string&gt;A000000167455349474E&lt;/string&gt;\n    &lt;string&gt;A0000002480100&lt;/string&gt;\n    &lt;string&gt;A0000002480200&lt;/string&gt;\n    &lt;string&gt;A0000002480300&lt;/string&gt;\n    &lt;string&gt;A00000045645444C2D3031&lt;/string&gt;\n    &lt;string&gt;A0000002471001&lt;/string&gt;\n    &lt;string&gt;A0000002472001&lt;/string&gt;\n    &lt;string&gt;00000000000000&lt;/string&gt;\n    &lt;string&gt;63000000000001&lt;/string&gt;\n    &lt;string&gt;D4100000030001&lt;/string&gt;\n&lt;/array&gt;\n</code></pre> <p></p>"},{"location":"index.html#faceid","title":"FaceID","text":"<p>In order for the SDK to use the FaceID, the user must grant permission to do so.</p> AndroidiOS <p>Nothing to do.</p> <p>To configure, in the app's Info.plist file, include NSFaceIDUsageDescription. After includ it, provide a description of why the app requires Face ID authentication.</p> <p></p>"},{"location":"index.html#camera","title":"Camera","text":"<p>In order for the SDK to use the camera, the user must grant permission to do so.</p> AndroidiOS <p>In order to use the camera related features, the user must give the camera permission in runtime, otherwise it won't work. We already handle the permission check and added to the manifest the following: <pre><code>&lt;uses-permission android:name=\"android.permission.CAMERA\" /&gt;\n</code></pre> So when using any feature that needs the camera, the user will be prompted to concede the permission if it hadn't already.</p> <p>To configure, in the app's Info.plist file, include NSCameraUsageDescription. After includ it, provide a message that explains the user why your app needs to capture media.</p> <p></p>"},{"location":"index.html#dependencies","title":"Dependencies","text":"AndroidiOS <ul> <li>Amadeus Enrolment<ul> <li>com.visionbox.mobileid.sdk:mid-sdk-enrolment:8.1.0</li> <li>com.visionbox.mobileid.sdk:vb-ocrmrzrfid-regula:1.0.3</li> </ul> </li> </ul> <ul> <li>'MobileIdSDKiOS', '~&gt; '8.1.7'</li> <li>'WalletLibrary', </li> <li>'VBOcrMrzRfidRegula-ios'     </li> </ul>"},{"location":"index.html#other-settings","title":"Other Settings","text":"AndroidiOS <p>Nothing to do.</p> <p>Disable User Script Sandboxing by pasting </p> <pre><code>ENABLE_USER_SCRIPT_SANDBOXING = NO\n</code></pre> <p>on project settings.</p> <p></p>"},{"location":"Features/MobileIdWalletSDK/BoardingPasses/Index.html","title":"Boarding Passes","text":"<p>The Mobile ID Wallet SDK provides robust functionality for managing boarding passes within the wallet. Developers can retrieve all stored boarding passes or access a specific boarding pass by its unique identifier, including full details when needed. Boarding passes can be added to the wallet by parsing images or scanning them directly with the device camera, and they can also be deleted when no longer required. </p>"},{"location":"Features/MobileIdWalletSDK/BoardingPasses/Index.html#scan-and-parse-boarding-pass","title":"Scan and Parse Boarding Pass","text":"AndroidiOS <pre><code>launch {\n    val result = MobileIdWallet.getInstance().scanBoardingPass(\n        activity = context,\n        input = ScanBoardingPass.Input(BoardingPassParameters(validate = false)),\n    )\n\n    if (result.isSuccess) {\n        val boardingPass = result.getOrNull()?.records\n        // handle success here\n    } else {\n        // handle error here\n    }\n}\n\nlaunch {\n    val imageUri: Uri = &lt;YOUR_IMAGE_URI&gt;\n    val result = MobileIdWallet.getInstance().parseBoardingPass(\n        activity = context,\n        input = ParseBoardingPass.Input(BoardingPassImageParserParameters(validate = false, uri = imageUri)),\n    )\n\n    if (result.isSuccess) {\n        val boardingPass = result.getOrNull()?.records\n        // handle success here\n    } else {\n        // handle error here\n    }\n}\n</code></pre> <pre><code>func scanBoardingPass() {\n    let viewController = UIViewController()\n    Task {\n        do {\n            let output = try await mobileIdWallet.scanBoardingPass(.init(\n                viewController: viewController,\n                parameters: .init(validateBoardingPass: true)\n            ))\n            let boardingPass = output.boardingPass\n            // handle success here\n        } catch {\n            // handle error here\n        }\n    }\n}\n\nfunc parseBoardingPass() {\n    let viewController = UIViewController()\n    let boardingPassImage = UIImage()\n    Task {\n        do {\n            let output = try await mobileIdWallet.parseBoardingPass(.init(\n                viewController: viewController,\n                parameters: .init(validateBoardingPass: true, boardingPassData: nil, boardingPassImage: boardingPassImage)\n            ))\n            let boardingPass = output.boardingPass\n            // handle success here\n        } catch {\n            // handle error here\n        }\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/BoardingPasses/Index.html#get-all-boarding-passes","title":"Get all Boarding Passes","text":"AndroidiOS <pre><code>launch {\n    val result = MobileIdWallet.getInstance().getAllBoardingPass()\n\n    if (result.isSuccess) {\n        val document = result.getOrNull()?.records\n        // handle success here\n    } else {\n        // handle error here\n    }\n}\n</code></pre> <pre><code>Task {\n    do {\n        let output = try await mobileIdWallet.getAllBoardingPass()\n        let records = output.records\n        // handle success here\n    } catch {\n        // handle error here\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/BoardingPasses/Index.html#get-a-boarding-pass","title":"Get a Boarding Pass","text":"AndroidiOS <pre><code>launch {\n    val result = MobileIdWallet.getInstance().getBoardingPass(\n        input = GetBoardingPass.Input(boardingPassId),\n    )\n\n    if (result.isSuccess) {\n        val boardingPass = result.getOrNull()?.boardingPass\n        // handle success here\n    } else {\n        // handle error here\n    }\n}\n</code></pre> <pre><code>Task {\n    do {\n        let boardingPassId = \"&lt;YOUR_BOARDING_PASS_ID&gt;\"\n        let output = try await mobileIdWallet.getBoardingPass(.init(boardingPassId: boardingPassId))\n        let boardingPass = output.record\n        // handle success here\n    } catch {\n        // handle error here\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/BoardingPasses/Index.html#delete","title":"Delete","text":"AndroidiOS <pre><code>launch {\n    val result = MobileIdWallet.getInstance().deleteBoardingPass(\n        input = DeleteBoardingPass.Input(\n            boardingPassId = boardingPassId\n        )\n    )\n\n    if (result.isSuccess) {\n        // handle success here\n    } else {\n        // handle error here\n    }\n}\n</code></pre> <pre><code>Task {\n    do {\n        let boardingPassId = \"&lt;YOUR_BOARDING_PASS_ID&gt;\"\n        let output = try await mobileIdWallet.deleteBoardingPass(.init(boardingPassId: boardingPassId))\n        if (output.success) {\n            // handle success here\n        } else {\n            // handle error here\n        }\n    } catch {\n        // handle error here\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/Documents/Index.html","title":"Document Reader","text":"<p>The Mobile ID Wallet SDK provides comprehensive support for managing identity documents within the wallet. Developers can retrieve all stored documents or access a specific document by its unique identifier. Documents can be added to the wallet by capturing them with the device camera and optionally using RFID for enhanced security. Stored documents can also be deleted when no longer needed.</p>"},{"location":"Features/MobileIdWalletSDK/Documents/Index.html#read","title":"Read","text":"AndroidiOS <pre><code>launch {\n    val result = MobileIdWallet.getInstance().readDocument(\n        activity = activity,\n        input = ReadDocument.Input(\n            params = DocumentReaderParameters(\n                rfidRead = true\n            )\n        )\n    )\n\n    if (result.isSuccess) {\n        val document = result.getOrNull()?.records\n        // handle success here\n    } else {\n        // handle error here\n    }\n}\n</code></pre> <pre><code>let yourTopViewController: UIViewController = .init()\nlet parameters: ReadDocumentParameters = .init(readRFID: true)\nTask {\n    do {\n        let result = try await mobileIdWallet.readDocument(.init(\n            viewController: yourTopViewController,\n            readDocumentParameters: parameters\n        ))\n        let document = result.document\n        // handle success here\n    } catch {\n        // handle error here\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/Documents/Index.html#retrieve-stored-documents","title":"Retrieve stored documents","text":"AndroidiOS <pre><code>launch {\n    val result = MobileIdWallet.getInstance().getAllDocuments()\n\n    if (result.isSuccess) {\n        val document = result.getOrNull()?.records\n        // handle success here\n    } else {\n        // handle error here\n    }\n}\n</code></pre> <pre><code>Task {\n    do {\n        let result = try await mobileIdWallet.getAllDocuments()\n        let records = result.records\n        // handle success here\n    } catch {\n        // handle error here\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/Documents/Index.html#get-document","title":"Get Document","text":"AndroidiOS <pre><code>launch {\n    val result = MobileIdWallet.getInstance().getDocument(\n        GetDocument.Input(documentId)\n    )\n\n    if (result.isSuccess) {\n        val document = result.getOrNull()?.record\n        // handle success here\n    } else {\n        // handle error here\n    }\n}\n</code></pre> <pre><code>Task {\n    do {\n        let documentId = \"&lt;YOUR_DOCUMENT_ID&gt;\"\n        let result = try await mobileIdWallet.getDocument(.init(documentId: documentId))\n        let document = result.record\n        // handle success here\n    } catch {\n        // handle error here\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/Documents/Index.html#delete-document","title":"Delete Document","text":"AndroidiOS <pre><code>launch {\n    val result = MobileIdWallet.getInstance().deleteDocument(\n        input = DeleteDocument.Input(\n            documentId = documentId\n        )\n    )\n\n    if (result.isSuccess) {\n        // handle success here\n    } else {\n        // handle error here\n    }\n}\n</code></pre> <pre><code>Task {\n    do {\n        let documentId = \"&lt;YOUR_DOCUMENT_ID&gt;\"\n        let result = try await mobileIdWallet.deleteDocument(.init(documentId: documentId))\n        if result.success {\n            // handle success here\n        } else {\n            // handle error here\n        }\n    } catch {\n        // handle error here\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/Documents/Index.html#build-document-from-documentreaderreport","title":"Build Document from DocumentReaderReport","text":"<p>We provide a facade method where the developer can convert a DocumentReaderReport into a Document.</p> AndroidiOS <pre><code>launch {\n    val result = MobileIdWallet.getInstance().mapDocumentReaderReportToDocument(\n        MapDocumentReaderReportToDocument.Input(documentReaderReport)\n    )\n\n    if (result.isSuccess &amp;&amp; result.getOrNull()?.success == true) {\n        val document = result.getOrNull()?.document\n        // TODO handle success here\n    } else {\n        // TODO handle error here\n    }\n}\n</code></pre> <pre><code>let documentReaderReport: DocumentReaderReport = .init(documentData: .init(),\n                                                       idDocument: .init(),\n                                                       documentType: .drivingLicense,\n                                                       documentRFIDStatus: .success,\n                                                       documentStatuses: [],\n                                                       documentPhotoHash: nil,\n                                                       documentDataHash: nil,\n                                                       idDocumentHash: nil)\nlet document: Model.DocumentData = documentReaderReport.mapToDocumentData\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/Intro/Index.html","title":"Intro","text":"AndroidiOS"},{"location":"Features/MobileIdWalletSDK/Intro/Index.html#coroutines-vs-callback","title":"Coroutines vs Callback","text":"<p>This SDK is built with flexibility in mind, offering both modern coroutine support and traditional callbacks for all functions. Whether you prefer the clarity of Kotlin Coroutines or need backward compatibility, you can choose the approach that best fits your project.</p> <p>Using coroutines: <pre><code>launch {\n    val result = MobileIdWallet.getInstance().getAllDocuments()\n\n    if (result.isSuccess) {\n        val documents = result.getOrNull().records\n        // handle success here\n    } else {\n        // handle error here\n    }\n}\n</code></pre></p> <p>Using callback: <pre><code>MobileIdWallet.getInstance().getAllDocuments {\n    if (it.isSuccess) {\n        val documents = it.getOrNull().records\n        // handle success here\n    } else {\n        // handle error here\n    }\n}\n</code></pre></p>"},{"location":"Features/MobileIdWalletSDK/Intro/Index.html#asyncawait-vs-completion-handlers","title":"Async/Await vs Completion Handlers","text":"<p>This SDK is built with flexibility in mind, offering both modern async/await support and traditional completion handlers for all functions. Whether you prefer the clarity of Swift Concurrency or need backward compatibility, you can choose the approach that best fits your project.</p>"},{"location":"Features/MobileIdWalletSDK/Intro/Index.html#asyncawait-vs-completion-handlers-sample","title":"Async/Await vs Completion Handlers sample","text":"<pre><code>import MobileIdWalletSDK\nimport WalletSDKCore\n\nclass ClosureVsAssync {\n    let mobileIdWallet: MobileIdWalletProtocol\n    init(mobileIdWallet: MobileIdWalletProtocol) {\n        self.mobileIdWallet = mobileIdWallet\n    }\n}\n\nextension ClosureVsAssync {\n    func getAllDocumentsAssync() {\n        Task {\n            do {\n                let output = try await mobileIdWallet.getAllDocuments()\n                guard let first = output.records.first else { return }\n                print(first)\n            } catch {\n                print(error)\n            }\n        }\n    }\n\n    func getAllDocumentsCompletionHandler() {\n        mobileIdWallet.getAllDocuments { result in\n            switch result {\n            case .success(let output):\n                guard let first = output.records.first else { return }\n                print(first)\n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/Misc/Index.html","title":"Misc Operations","text":"<p>The Mobile ID Wallet SDK provides additional utility functions to simplify wallet management. This includes operations such as batch deleting multiple documents or boarding passes at once, allowing developers to efficiently manage wallet contents. These miscellaneous functions complement the main workflows for document and boarding pass handling, providing flexibility and control over stored data.</p>"},{"location":"Features/MobileIdWalletSDK/Misc/Index.html#batch-delete","title":"Batch Delete","text":"AndroidiOS <pre><code>launch {\n    val result = MobileIdWallet.getInstance().batchDelete()\n\n    if (result.isSuccess) {\n        // handle success here\n    } else {\n        // handle error here\n    }\n}\n</code></pre> <pre><code>mobileIdWallet.batchDelete()\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/Misc/Index.html#exceptions-handling","title":"Exceptions handling","text":"AndroidiOS <pre><code>/// Demonstrates a `WalletSDKError.dataBase(.duplicatedRecord)` scenario.\n///\n/// In this example, a boarding pass is associated with a document twice,\n/// triggering a database-level duplication error.\nfunc duplicatedRecord() {\n    let topViewController = UIViewController()\n\n    Task {\n        do {\n            let readDocumentOutput = try await mobileIdWallet.readDocument(.init(\n                viewController: topViewController,\n                readDocumentParameters: .init(readRFID: true)\n            ))\n\n            let readBoardingPassOutput = try await mobileIdWallet.scanBoardingPass(.init(\n                viewController: topViewController,\n                parameters: .init(validateBoardingPass: true)\n            ))\n\n            // First association succeeds.\n            _ = try await mobileIdWallet.assocBoardingPassWithDocument(.init(\n                viewController: UIViewController(),\n                documentId: readDocumentOutput.document.id,\n                boardingPassId: readBoardingPassOutput.boardingPass.id\n            ))\n\n            // Attempting the same association again will throw:\n            // `WalletSDKError.dataBase(.duplicatedRecord)`\n            _ = try await mobileIdWallet.assocBoardingPassWithDocument(.init(\n                viewController: UIViewController(),\n                documentId: readDocumentOutput.document.id,\n                boardingPassId: readBoardingPassOutput.boardingPass.id\n            ))\n\n        } catch {\n            if let error = error as? WalletSDKError {\n                // Uses your computed property for a localized, user-safe message\n                print(error.publicMessage)\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/SubjectManagement/Index.html","title":"Subject Management","text":"<p>A <code>Subject</code> consists of a set of data that represents a digital ID in the enrolment process. The Mobile ID SDK provides the ability to build and create such <code>Subject</code>. More info here.</p> <p>The Mobile ID Wallet SDK provides functionality to manage the relationships between passengers, flights, documents, and boarding passes. Developers can retrieve the current status of a subject using its unique identifier, allowing apps to track verification progress or workflow state. The SDK also supports creating and verifying subjects by associating a boarding pass with a document, linking passengers to their flights securely within the wallet. </p>"},{"location":"Features/MobileIdWalletSDK/SubjectManagement/Index.html#add-subject","title":"Add Subject","text":"<p>You can create a new subject using the <code>assocBoardingPassWithDocument</code> method, that will do behind the scenes the <code>addSubject</code>. </p> AndroidiOS <pre><code>launch {\n    val result = MobileIdWallet.getInstance().assocBoardingPassWithDocument(\n        context = context,\n        AssocBoardingPassWithDocument.Input(\n            documentId = documentId,\n            boardingPassId = boardingPassId,\n        )\n    )\n\n    if (result.isSuccess) {\n        val subjectId = result.getOrNull()?.subjectId\n        // handle success here\n    } else {\n        // handle error here\n    }\n}\n</code></pre> <pre><code>let viewController = UIViewController()\nTask {\n    let documentId = \"&lt;YOUR_DOCUMENT_ID&gt;\"\n    let boardingPassId = \"&lt;YOUR_BOARDING_PASS_ID&gt;\"\n    do {\n        let output = try await mobileIdWallet.assocBoardingPassWithDocument(.init(\n            viewController: viewController,\n            documentId: documentId,\n            boardingPassId: boardingPassId\n        ))\n        let subjectId = output.subjectId\n        // handle success here\n    } catch {\n        // handle error here\n    }\n}\n</code></pre>"},{"location":"Features/MobileIdWalletSDK/SubjectManagement/Index.html#get-subject-status","title":"Get Subject Status","text":"<p>After <code>assocBoardingPassWithDocument</code> a <code>Subject</code>, the id will be returned. This id can be used to get the <code>SubjectStatus</code> which will contain information about the current status of a given <code>Subject</code>. </p> <p>More info here.</p> AndroidiOS <pre><code>launch {\n    val result = MobileIdWallet.getInstance().getSubjectStatus(\n        GetSubjectStatus.Input(subjectId)\n    )\n\n    if (result.isSuccess) {\n        val subjectId = result.getOrNull()?.subjectStatus\n        // handle success here\n    } else {\n        // handle error here\n    }\n}\n</code></pre> <pre><code>let subjectId = \"&lt;YOUR_SUBJECT_ID&gt;\"\ndo {\n    let output = try await mobileIdWallet.getSubjectStatus(.init(subjectId: subjectId))\n    let subjectStatus = output.subjectStatus\n    let subjectId = subjectStatus.id\n    let status = subjectStatus.status\n    // handle success here\n} catch {\n    // handle error here\n}\n</code></pre>"},{"location":"Features/MobileIdWalletUISDK/Intro/Index.html","title":"Intro","text":"<p>MobileIdWalletUISDK simplifies navigation by providing a pre-built UI and routing system. Developers only need to decide where to direct users within the SDK, without manually handling view controller transitions.</p> <p>The MobileIdWalletUIRouterProtocol handles routing to key sections, such as the Verifiable Credentials and Flights screens. Below is a sample implementation:</p>"},{"location":"Features/MobileIdWalletUISDK/Intro/Index.html#sample-usage","title":"Sample Usage","text":"AndroidiOS <p>To create a trip, call the following facade method:</p> <pre><code>MobileIdWalletUI.getInstance().createTrip(requireActivity())\n</code></pre> <p>To show the credentials list screen, call the following facade method:</p> <pre><code>MobileIdWalletUI.getInstance().showDigitalIds(requireActivity())\n</code></pre> <p>To show the boarding passes list screen, call the following facade method:</p> <pre><code>MobileIdWalletUI.getInstance().showTrips(requireActivity())\n</code></pre> <pre><code>import UIKit\nimport MobileIdWalletUISDK\n\nclass RoutingExampleViewController: UIViewController {\n    let router: MobileIdWalletUIRouterProtocol?\n    public init(router: MobileIdWalletUIRouterProtocol?) {\n        self.router = router\n        super.init(nibName: nil, bundle: nil)\n    }\n\n    @available(*, unavailable)\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.backgroundColor = .white\n\n        let btnAccessWallet = UIButton(type: .system)\n        btnAccessWallet.setTitle(\"Access digital ID Wallet\", for: .normal)\n        btnAccessWallet.addTarget(self, action: #selector(btnAccessWalletTapped), for: .touchUpInside)\n\n        let btnCreateTrip = UIButton(type: .system)\n        btnCreateTrip.setTitle(\"Route to trips\", for: .normal)\n        btnCreateTrip.addTarget(self, action: #selector(btnCreateTripTapped), for: .touchUpInside)\n\n        let stackView = UIStackView(arrangedSubviews: [btnAccessWallet, btnCreateTrip])\n        stackView.axis = .vertical\n        stackView.spacing = 16\n        stackView.translatesAutoresizingMaskIntoConstraints = false\n\n        view.addSubview(stackView)\n\n        NSLayoutConstraint.activate([\n            stackView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            stackView.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n\n    @objc private func btnAccessWalletTapped() {\n        router?.navigateToVerifiableCredentials(model: .init())\n    }\n\n    @objc private func btnCreateTripTapped() {\n        router?.navigateToFlights(model: .init(shouldCreateNewOnScreenLoad: false))\n    }\n}\n</code></pre>"},{"location":"MigrationGuide/MigrationGuide_Android.html","title":"Android Migration Guide","text":""},{"location":"MigrationGuide/MigrationGuide_Android.html#from-100-to-101","title":"From 1.0.0 to 1.0.1","text":""},{"location":"MigrationGuide/MigrationGuide_Android.html#required-changes","title":"Required Changes","text":"<ul> <li>To do</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_Android.html#optional-changes","title":"Optional Changes","text":"<ul> <li>To do</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_iOS.html","title":"iOS Migration Guide","text":""},{"location":"MigrationGuide/MigrationGuide_iOS.html#from-100-to-101","title":"From 1.0.0 to 1.0.1","text":""},{"location":"MigrationGuide/MigrationGuide_iOS.html#required-changes","title":"Required Changes","text":"<ul> <li>To do</li> </ul>"},{"location":"MigrationGuide/MigrationGuide_iOS.html#optional-changes","title":"Optional Changes","text":"<ul> <li>To do</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html","title":"Android Release Notes","text":""},{"location":"ReleaseNotes/ReleaseNotes_Android.html#100","title":"1.0.0","text":""},{"location":"ReleaseNotes/ReleaseNotes_Android.html#new-features","title":"New Features","text":""},{"location":"ReleaseNotes/ReleaseNotes_Android.html#document-boarding-pass-capture","title":"Document &amp; Boarding Pass Capture","text":"<ul> <li>Read Document: Scan passport documents using the device camera and RFID reader.</li> <li>Read Document: Scan passport documents using the device camera and RFID reader.</li> <li>Scan Boarding Pass: Capture and parse boarding passes via camera input.</li> <li>Parse Boarding Pass: Automatically extract flight details from scanned boarding pass images.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#secure-storage-retrieval","title":"Secure Storage &amp; Retrieval","text":"<ul> <li>Encrypted Wallet: Store parsed documents and boarding passes securely using device-level encryption.</li> <li>Flexible Retrieval: Retrieve all stored items or query specific entries using unique identifiers.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#deletion-operations","title":"Deletion Operations","text":"<ul> <li>Selective Deletion: Remove individual documents or boarding passes from the wallet.</li> <li>Bulk Deletion: Clear all wallet contents in a single operation.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#subject-enrollment","title":"Subject Enrollment","text":"<ul> <li>Biometric Linking: Link boarding passes with passport data using biometric validation to streamline identity verification.</li> <li>Status Query: Check the current enrollment status of a subject using their unique ID.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_Android.html#setup-customization","title":"Setup &amp; Customization","text":"<ul> <li>Configurable Parameters: Customize wallet behavior and appearance using setup parameters tailored to your application needs.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html","title":"iOS Release Notes","text":""},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#100","title":"1.0.0","text":""},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#new-features","title":"New Features","text":""},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#document-boarding-pass-capture","title":"Document &amp; Boarding Pass Capture","text":"<ul> <li>Read Document: Scan passport documents using the device camera and RFID reader.</li> <li>Read Document: Scan passport documents using the device camera and RFID reader.</li> <li>Scan Boarding Pass: Capture and parse boarding passes via camera input.</li> <li>Parse Boarding Pass: Automatically extract flight details from scanned boarding pass images.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#secure-storage-retrieval","title":"Secure Storage &amp; Retrieval","text":"<ul> <li>Encrypted Wallet: Store parsed documents and boarding passes securely using device-level encryption.</li> <li>Flexible Retrieval: Retrieve all stored items or query specific entries using unique identifiers.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#deletion-operations","title":"Deletion Operations","text":"<ul> <li>Selective Deletion: Remove individual documents or boarding passes from the wallet.</li> <li>Bulk Deletion: Clear all wallet contents in a single operation.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#subject-enrollment","title":"Subject Enrollment","text":"<ul> <li>Biometric Linking: Link boarding passes with passport data using biometric validation to streamline identity verification.</li> <li>Status Query: Check the current enrollment status of a subject using their unique ID.</li> </ul>"},{"location":"ReleaseNotes/ReleaseNotes_iOS.html#setup-customization","title":"Setup &amp; Customization","text":"<ul> <li>Configurable Parameters: Customize wallet behavior and appearance using setup parameters tailored to your application needs.</li> </ul>"}]}